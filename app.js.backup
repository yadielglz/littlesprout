    // --- GLOBAL STATE ---
    let customActivities = [];
    let activityLog = [];
    let moodAnalytics = { total: 0, moods: {} };
    let milestones = [];
    let growthData = [];
    let feedingSchedules = [];
    let reminders = [];
    let appointments = [];
    let inventory = {
      diapers: 0,
      wipes: 0,
      formula: 0,
      medicine: 0
    };
    let timerState = {
      isRunning: false,
      startTime: null,
      currentActivity: null,
      interval: null,
      elapsed: 0
    };
    const defaultActivities = [
      { id: 'feed', name: 'Feed', icon: 'fas fa-utensils', color: 'blue-500' },
      { id: 'sleep', name: 'Sleep', icon: 'fas fa-moon', color: 'indigo-500' },
      { id: 'nap', name: 'Nap', icon: 'fas fa-bed', color: 'purple-500' },
      { id: 'diaper', name: 'Diaper', icon: 'fas fa-baby', color: 'amber-500' },
      { id: 'tummy', name: 'Tummy Time', icon: 'fas fa-child-reaching', color: 'lime-500' },
      { id: 'mood', name: 'Mood', icon: 'fas fa-heart', color: 'pink-500' },
      { id: 'feeding-schedule', name: 'Schedule', icon: 'fas fa-clock', color: 'indigo-500' },
      { id: 'milestone', name: 'Milestone', icon: 'fas fa-trophy', color: 'yellow-500' },
      { id: 'medication', name: 'Meds', icon: 'fas fa-pills', color: 'cyan-500' },
      { id: 'temperature', name: 'Temp', icon: 'fas fa-thermometer', color: 'orange-500' },
      { id: 'vaccine', name: 'Vaccine', icon: 'fas fa-syringe', color: 'teal-500' },
    ];
    // --- PROFILE STATE ---
    let babyProfiles = [], currentProfileId = null;
    // --- DATA MANAGEMENT ---
    function saveData() {
      try {
        localStorage.setItem(`activityLog_${currentProfileId}`, JSON.stringify(activityLog));
        localStorage.setItem(`moodAnalytics_${currentProfileId}`, JSON.stringify(moodAnalytics));
        localStorage.setItem(`customActivities_${currentProfileId}`, JSON.stringify(customActivities));
        localStorage.setItem(`milestones_${currentProfileId}`, JSON.stringify(milestones));
        localStorage.setItem(`growthData_${currentProfileId}`, JSON.stringify(growthData));
        localStorage.setItem(`feedingSchedules_${currentProfileId}`, JSON.stringify(feedingSchedules));
        localStorage.setItem(`reminders_${currentProfileId}`, JSON.stringify(reminders));
        localStorage.setItem(`appointments_${currentProfileId}`, JSON.stringify(appointments));
        localStorage.setItem(`inventory_${currentProfileId}`, JSON.stringify(inventory));
      } catch (error) {
        console.error('Failed to save data:', error);
      }
    }
    function loadData() {
      try {
        activityLog = JSON.parse(localStorage.getItem(`activityLog_${currentProfileId}`) || '[]');
        moodAnalytics = JSON.parse(localStorage.getItem(`moodAnalytics_${currentProfileId}`) || '{"total": 0, "moods": {}}');
        customActivities = JSON.parse(localStorage.getItem(`customActivities_${currentProfileId}`) || '[]');
        milestones = JSON.parse(localStorage.getItem(`milestones_${currentProfileId}`) || '[]');
        growthData = JSON.parse(localStorage.getItem(`growthData_${currentProfileId}`) || '[]');
        feedingSchedules = JSON.parse(localStorage.getItem(`feedingSchedules_${currentProfileId}`) || '[]');
        reminders = JSON.parse(localStorage.getItem(`reminders_${currentProfileId}`) || '[]');
        appointments = JSON.parse(localStorage.getItem(`appointments_${currentProfileId}`) || '[]');
        inventory = JSON.parse(localStorage.getItem(`inventory_${currentProfileId}`) || '{"diapers": 0, "wipes": 0, "formula": 0, "medicine": 0}');
      } catch (error) {
        console.error('Failed to load data:', error);
        activityLog = [];
        moodAnalytics = { total: 0, moods: {} };
        customActivities = [];
        milestones = [];
        growthData = [];
        feedingSchedules = [];
        reminders = [];
        appointments = [];
        inventory = { diapers: 0, wipes: 0, formula: 0, medicine: 0 };
      }
    }
    // --- ACTIVITY LOGGING ---
    function addEntry(activityType, timestamp, notes = '', mood = null, quantity = null, feedType = null) {
      const entry = {
        id: Date.now().toString(),
        type: activityType,
        timestamp: timestamp,
        notes: notes,
        mood: mood,
        quantity: quantity,
        feedType: feedType
      };
      
      // Deduct inventory items based on activity type
      deductInventoryForActivity(activityType, quantity, feedType);
      
      activityLog.unshift(entry);
      if (mood) {
        moodAnalytics.total++;
        moodAnalytics.moods[mood] = (moodAnalytics.moods[mood] || 0) + 1;
      }
      saveData();
      renderActivityLog();
      renderMoodAnalytics();
      updateLastLogDisplay();
      
      // Update daily stats if the activity is from today
      const entryDate = new Date(timestamp);
      const today = new Date();
      if (entryDate.toDateString() === today.toDateString()) {
        updateDailyStats(today);
      }
    }
    
    // --- INVENTORY DEDUCTION FOR ACTIVITIES ---
    function deductInventoryForActivity(activityType, quantity = null, feedType = null) {
      let deductions = [];
      
      switch (activityType) {
        case 'diaper':
          // Diaper change uses 1 diaper and typically 2-3 wipes
          if (inventory.diapers > 0) {
            inventory.diapers--;
            deductions.push('1 diaper');
          }
          if (inventory.wipes >= 2) {
            inventory.wipes -= 2;
            deductions.push('2 wipes');
          } else if (inventory.wipes > 0) {
            const wipesUsed = inventory.wipes;
            inventory.wipes = 0;
            deductions.push(`${wipesUsed} wipe${wipesUsed > 1 ? 's' : ''}`);
          }
          break;
          
        case 'feed':
          // Formula feeding deducts formula based on quantity
          if (feedType === 'formula' && quantity && quantity > 0) {
            // Convert oz to formula bottles (assuming 1 bottle = 4 oz)
            const bottlesNeeded = Math.ceil(quantity / 4);
            if (inventory.formula >= bottlesNeeded) {
              inventory.formula -= bottlesNeeded;
              deductions.push(`${bottlesNeeded} formula bottle${bottlesNeeded > 1 ? 's' : ''}`);
            } else if (inventory.formula > 0) {
              const bottlesUsed = inventory.formula;
              inventory.formula = 0;
              deductions.push(`${bottlesUsed} formula bottle${bottlesUsed > 1 ? 's' : ''}`);
            }
          }
          break;
          
        case 'medication':
          // Medication uses 1 dose
          if (inventory.medicine > 0) {
            inventory.medicine--;
            deductions.push('1 medicine dose');
          }
          break;
      }
      
      // Show notification if items were deducted
      if (deductions.length > 0) {
        const message = `Used: ${deductions.join(', ')}`;
        showInventoryNotification(message);
      }
      
      // Show warning if any item is now low or out of stock
      checkLowStockWarnings();
      
      // Update inventory display
      renderInventory();
    }
    
    function restoreInventoryFromActivity(activityType, quantity = null, feedType = null) {
      let restorations = [];
      
      switch (activityType) {
        case 'diaper':
          // Restore 1 diaper and 2 wipes
          inventory.diapers++;
          inventory.wipes += 2;
          restorations.push('1 diaper, 2 wipes');
          break;
          
        case 'feed':
          // Restore formula if it was formula feeding
          if (feedType === 'formula' && quantity && quantity > 0) {
            const bottlesRestored = Math.ceil(quantity / 4);
            inventory.formula += bottlesRestored;
            restorations.push(`${bottlesRestored} formula bottle${bottlesRestored > 1 ? 's' : ''}`);
          }
          break;
          
        case 'medication':
          // Restore 1 medicine dose
          inventory.medicine++;
          restorations.push('1 medicine dose');
          break;
      }
      
      // Show notification if items were restored
      if (restorations.length > 0) {
        const message = `Restored: ${restorations.join(', ')}`;
        showInventoryNotification(message);
      }
      
      // Update inventory display
      renderInventory();
    }
    
    function showInventoryNotification(message) {
      // Create a temporary notification element
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 opacity-0 translate-x-full';
      notification.innerHTML = `
        <div class="flex items-center space-x-2">
          <i class="fas fa-boxes"></i>
          <span>${message}</span>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('opacity-0', 'translate-x-full');
      }, 100);
      
      // Animate out and remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('opacity-0', 'translate-x-full');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
    
    function checkLowStockWarnings() {
      const lowStockThreshold = 5;
      const warnings = [];
      
      if (inventory.diapers <= lowStockThreshold && inventory.diapers > 0) {
        warnings.push(`Low on diapers: ${inventory.diapers} remaining`);
      } else if (inventory.diapers === 0) {
        warnings.push('Out of diapers!');
      }
      
      if (inventory.wipes <= lowStockThreshold && inventory.wipes > 0) {
        warnings.push(`Low on wipes: ${inventory.wipes} remaining`);
      } else if (inventory.wipes === 0) {
        warnings.push('Out of wipes!');
      }
      
      if (inventory.formula <= lowStockThreshold && inventory.formula > 0) {
        warnings.push(`Low on formula: ${inventory.formula} bottles remaining`);
      } else if (inventory.formula === 0) {
        warnings.push('Out of formula!');
      }
      
      if (inventory.medicine <= lowStockThreshold && inventory.medicine > 0) {
        warnings.push(`Low on medicine: ${inventory.medicine} doses remaining`);
      } else if (inventory.medicine === 0) {
        warnings.push('Out of medicine!');
      }
      
      // Show warnings if any
      if (warnings.length > 0) {
        const warningMessage = warnings.join('\n');
        showLowStockWarning(warningMessage);
      }
    }
    
    function showLowStockWarning(message) {
      // Create a temporary warning notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 left-4 bg-orange-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 opacity-0 -translate-x-full max-w-sm';
      notification.innerHTML = `
        <div class="flex items-center space-x-2">
          <i class="fas fa-exclamation-triangle"></i>
          <span class="text-sm">${message}</span>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('opacity-0', '-translate-x-full');
      }, 100);
      
      // Animate out and remove after 5 seconds
      setTimeout(() => {
        notification.classList.add('opacity-0', '-translate-x-full');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 5000);
    }
    
    function renderActivityLog() {
      const container = $('#activity-log');
      if (!container) return;
      const recentEntries = activityLog.slice(0, 10);
      if (recentEntries.length === 0) {
        container.innerHTML = '<p class="text-secondary text-center py-4">No activities logged yet. Start tracking your baby\'s day!</p>';
        return;
      }
      container.innerHTML = recentEntries.map(entry => {
        const activity = [...defaultActivities, ...customActivities].find(a => a.id === entry.type);
        const timeAgo = getTimeAgo(new Date(entry.timestamp));
        const moodDisplay = entry.mood ? `<span class="text-2xl ml-2">${entry.mood}</span>` : '';
        const quantityDisplay = entry.quantity ? `<div class="text-sm text-blue-600 font-medium">${entry.quantity} oz</div>` : '';
        const feedTypeDisplay = entry.feedType ? `<div class="text-sm text-purple-600 font-medium">${entry.feedType === 'breast' ? 'Breast' : 'Formula'}</div>` : '';
        return `
          <div class="flex items-center justify-between p-3 bg-white/50 dark:bg-slate-800/50 rounded-lg">
            <div class="flex items-center">
              <i class="${activity?.icon || 'fas fa-question'} text-${activity?.color || 'gray-500'} text-xl mr-3"></i>
              <div>
                <div class="font-semibold text-primary">${activity?.name || entry.type}</div>
                <div class="text-sm text-secondary">${timeAgo}</div>
                ${feedTypeDisplay}
                ${quantityDisplay}
                ${entry.notes ? `<div class="text-sm text-secondary mt-1">${entry.notes}</div>` : ''}
              </div>
            </div>
            <div class="flex items-center space-x-2">
              ${moodDisplay}
              <button onclick="editActivity('${entry.id}')" class="text-blue-500 hover:text-blue-700 transition-colors" title="Edit activity">
                <i class="fas fa-edit"></i>
              </button>
            </div>
          </div>
        `;
      }).join('');
    }
    function getTimeAgo(date) {
      const now = new Date();
      const diffMs = now - date;
      const diffMins = Math.floor(diffMs / 60000);
      const diffHours = Math.floor(diffMs / 3600000);
      const diffDays = Math.floor(diffMs / 86400000);
      if (diffMins < 1) return 'Just now';
      if (diffMins < 60) return `${diffMins}m ago`;
      if (diffHours < 24) return `${diffHours}h ago`;
      return `${diffDays}d ago`;
    }
    function updateLastLogDisplay() {
      const lastEntry = activityLog[0];
      if (lastEntry) {
        const activity = [...defaultActivities, ...customActivities].find(a => a.id === lastEntry.type);
        const timeAgo = getTimeAgo(new Date(lastEntry.timestamp));
        // You can add this to the header or a separate display area
      }
    }
    // --- MOOD ANALYTICS ---
    function renderMoodAnalytics() {
      const container = $('#mood-analytics');
      if (!container) return;
      
      if (moodAnalytics.total === 0) {
        container.innerHTML = '<p class="text-secondary">Log mood activities to see analytics here!</p>';
        return;
      }
      
      const moodEmojis = ['😢', '😐', '🙂', '😊', '😄'];
      const moodNames = ['Very Sad', 'Sad', 'Neutral', 'Happy', 'Very Happy'];
      
      let html = '<div class="space-y-3">';
      moodEmojis.forEach((emoji, index) => {
        const count = moodAnalytics.moods[emoji] || 0;
        const percentage = moodAnalytics.total > 0 ? Math.round((count / moodAnalytics.total) * 100) : 0;
        const barWidth = percentage;
        
        html += `
          <div class="flex items-center space-x-3">
            <span class="text-2xl w-8">${emoji}</span>
            <div class="flex-1">
              <div class="flex justify-between text-sm mb-1">
                <span class="font-medium">${moodNames[index]}</span>
                <span class="text-secondary">${count} (${percentage}%)</span>
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <div class="bg-gradient-to-r from-blue-400 to-purple-500 h-2 rounded-full transition-all duration-500" style="width: ${barWidth}%"></div>
              </div>
            </div>
          </div>
        `;
      });
      html += '</div>';
      container.innerHTML = html;
    }
    // --- MILESTONE TRACKING ---
    function updateMilestoneTicker() {
      const ticker = $('#milestone-text');
      if (!ticker) return;
      
      if (milestones.length === 0) {
        ticker.textContent = 'No milestones recorded yet. Add your first milestone!';
        return;
      }
      
      // Get the most recent milestone
      const recentMilestone = milestones[0];
      const milestoneDate = new Date(recentMilestone.date);
      const daysAgo = Math.floor((new Date() - milestoneDate) / (1000 * 60 * 60 * 24));
      
      let milestoneText = '';
      if (recentMilestone.type === 'custom') {
        milestoneText = `${recentMilestone.customText} - ${daysAgo} day${daysAgo !== 1 ? 's' : ''} ago`;
      } else {
        const milestoneNames = {
          'first-smile': 'First Smile',
          'first-roll': 'First Roll',
          'first-sit': 'First Sit',
          'first-crawl': 'First Crawl',
          'first-step': 'First Step',
          'first-word': 'First Word',
          'first-tooth': 'First Tooth'
        };
        milestoneText = `${milestoneNames[recentMilestone.type] || recentMilestone.type} - ${daysAgo} day${daysAgo !== 1 ? 's' : ''} ago`;
      }
      
      ticker.textContent = milestoneText;
    }
    function addMilestone(type, date, notes = '', customText = '') {
      const milestone = {
        id: Date.now().toString(),
        type: type,
        date: date,
        notes: notes,
        customText: customText,
        timestamp: new Date().toISOString()
      };
      milestones.unshift(milestone);
      saveData();
      updateMilestoneTicker();
    }
    // --- GROWTH TRACKING ---
    function addGrowthMeasurement(type, value, unit, date) {
      type = type.toLowerCase(); // Ensure type is lowercase for consistency
      console.log('Adding growth measurement:', { type, value, unit, date });
      const measurement = {
        id: Date.now().toString(),
        type: type,
        value: parseFloat(value),
        unit: unit,
        date: date,
        timestamp: new Date().toISOString()
      };
      growthData.push(measurement);
      growthData.sort((a, b) => new Date(b.date) - new Date(a.date));
      saveData();
      renderGrowthHistory();

      // Log as activity for weight/height
      if (type === 'weight' || type === 'height') {
        let displayValue = value;
        if (unit === 'ft-in') {
          const totalInches = value;
          const feet = Math.floor(totalInches / 12);
          const inches = Math.round(totalInches % 12);
          displayValue = `${feet}-${inches}`;
        } else if (unit === 'm-cm') {
          const totalCm = value;
          const meters = Math.floor(totalCm / 100);
          const centimeters = Math.round(totalCm % 100);
          displayValue = `${meters}-${centimeters}`;
        } else {
          displayValue = Math.round(value * 10) / 10;
        }
        const note = `Logged ${type.charAt(0).toUpperCase() + type.slice(1)}: ${displayValue} ${unit}`;
        addEntry(type, new Date().toISOString(), note);
      }
      // Update header stats
      updateHeaderStats();
    }
    
    function updateMeasurementFields() {
      const typeSelect = document.getElementById('measurement-type');
      const unitSelect = document.getElementById('measurement-unit');
      const valueLabel = document.getElementById('value-label');
      const formatHint = document.getElementById('format-hint');
      const valueInput = document.getElementById('measurement-value');
      const inputHelp = document.getElementById('input-help');
      
      const type = typeSelect.value;
      const unit = unitSelect.value;
      
      // Reset fields
      valueInput.value = '';
      valueInput.placeholder = '';
      formatHint.textContent = '';
      inputHelp.textContent = '';
      
      if (!type || !unit) {
        valueLabel.textContent = 'Value';
        return;
      }
      
      // Update unit options based on measurement type
      const unitOptions = unitSelect.querySelectorAll('option');
      unitOptions.forEach(option => {
        if (option.value === '') return; // Skip the placeholder
        
        const dataType = option.getAttribute('data-type');
        if (dataType) {
          const allowedTypes = dataType.split(',');
          if (allowedTypes.includes(type)) {
            option.style.display = '';
          } else {
            option.style.display = 'none';
          }
        }
      });
      
      // Update labels and hints based on type and unit
      if (type === 'weight') {
        valueLabel.textContent = 'Weight';
        if (unit === 'lbs') {
          valueInput.placeholder = 'e.g., 8.5';
          formatHint.textContent = '(pounds)';
          inputHelp.textContent = 'Enter weight in pounds (e.g., 8.5 for 8 pounds 8 ounces)';
        } else if (unit === 'kg') {
          valueInput.placeholder = 'e.g., 3.9';
          formatHint.textContent = '(kilograms)';
          inputHelp.textContent = 'Enter weight in kilograms (e.g., 3.9 for 3.9 kg)';
        }
      } else if (type === 'height') {
        valueLabel.textContent = 'Height';
        if (unit === 'in') {
          valueInput.placeholder = 'e.g., 20.5';
          formatHint.textContent = '(inches)';
          inputHelp.textContent = 'Enter height in inches (e.g., 20.5 for 20.5 inches)';
        } else if (unit === 'cm') {
          valueInput.placeholder = 'e.g., 52.1';
          formatHint.textContent = '(centimeters)';
          inputHelp.textContent = 'Enter height in centimeters (e.g., 52.1 for 52.1 cm)';
        } else if (unit === 'ft-in') {
          valueInput.placeholder = 'e.g., 1-8';
          formatHint.textContent = '(feet-inches)';
          inputHelp.textContent = 'Enter height as feet-inches (e.g., 1-8 for 1 foot 8 inches)';
        } else if (unit === 'm-cm') {
          valueInput.placeholder = 'e.g., 0-52';
          formatHint.textContent = '(meters-centimeters)';
          inputHelp.textContent = 'Enter height as meters-centimeters (e.g., 0-52 for 0 meters 52 cm)';
        }
      } else if (type === 'head-circumference') {
        valueLabel.textContent = 'Head Circumference';
        if (unit === 'in') {
          valueInput.placeholder = 'e.g., 14.2';
          formatHint.textContent = '(inches)';
          inputHelp.textContent = 'Enter head circumference in inches (e.g., 14.2 for 14.2 inches)';
        } else if (unit === 'cm') {
          valueInput.placeholder = 'e.g., 36.1';
          formatHint.textContent = '(centimeters)';
          inputHelp.textContent = 'Enter head circumference in centimeters (e.g., 36.1 for 36.1 cm)';
        }
      }
    }
    
    function validateMeasurementValue(value, type, unit) {
      if (!value || !type || !unit) return false;
      
      // Remove extra spaces
      value = value.trim();
      
      if (type === 'weight') {
        if (unit === 'lbs' || unit === 'kg') {
          const numValue = parseFloat(value);
          return !isNaN(numValue) && numValue > 0 && numValue < 1000;
        }
      } else if (type === 'height') {
        if (unit === 'in' || unit === 'cm') {
          const numValue = parseFloat(value);
          return !isNaN(numValue) && numValue > 0 && numValue < 200;
        } else if (unit === 'ft-in') {
          // Format: feet-inches (e.g., 1-8, 2-3)
          const match = value.match(/^(\d+)-(\d+)$/);
          if (!match) return false;
          const feet = parseInt(match[1]);
          const inches = parseInt(match[2]);
          return feet >= 0 && feet < 10 && inches >= 0 && inches < 12;
        } else if (unit === 'm-cm') {
          // Format: meters-centimeters (e.g., 0-52, 1-25)
          const match = value.match(/^(\d+)-(\d+)$/);
          if (!match) return false;
          const meters = parseInt(match[1]);
          const centimeters = parseInt(match[2]);
          return meters >= 0 && meters < 3 && centimeters >= 0 && centimeters < 100;
        }
      } else if (type === 'head-circumference') {
        if (unit === 'in' || unit === 'cm') {
          const numValue = parseFloat(value);
          return !isNaN(numValue) && numValue > 0 && numValue < 100;
        }
      }
      
      return false;
    }
    
    function parseMeasurementValue(value, type, unit) {
      if (!value || !type || !unit) return null;
      
      value = value.trim();
      
      if (type === 'weight') {
        if (unit === 'lbs' || unit === 'kg') {
          return parseFloat(value);
        }
      } else if (type === 'height') {
        if (unit === 'in' || unit === 'cm') {
          return parseFloat(value);
        } else if (unit === 'ft-in') {
          // Convert feet-inches to total inches
          const match = value.match(/^(\d+)-(\d+)$/);
          if (match) {
            const feet = parseInt(match[1]);
            const inches = parseInt(match[2]);
            return feet * 12 + inches;
          }
        } else if (unit === 'm-cm') {
          // Convert meters-centimeters to total centimeters
          const match = value.match(/^(\d+)-(\d+)$/);
          if (match) {
            const meters = parseInt(match[1]);
            const centimeters = parseInt(match[2]);
            return meters * 100 + centimeters;
          }
        }
      } else if (type === 'head-circumference') {
        if (unit === 'in' || unit === 'cm') {
          return parseFloat(value);
        }
      }
      
      return null;
    }
    function renderGrowthHistory() {
      const container = $('#growth-history');
      if (!container) return;
      
      if (growthData.length === 0) {
        container.innerHTML = '<p class="text-secondary text-center py-4">No measurements recorded yet.</p>';
        return;
      }
      
      const recentMeasurements = growthData.slice(0, 10);
      container.innerHTML = recentMeasurements.map(measurement => {
        const measurementNames = {
          'weight': 'Weight',
          'height': 'Height',
          'head-circumference': 'Head Circumference'
        };
        
        // Format the display value based on unit
        let displayValue = measurement.value;
        let displayUnit = measurement.unit;
        
        if (measurement.unit === 'ft-in') {
          // Convert total inches back to feet-inches format
          const totalInches = measurement.value;
          const feet = Math.floor(totalInches / 12);
          const inches = Math.round(totalInches % 12);
          displayValue = `${feet}-${inches}`;
          displayUnit = 'ft-in';
        } else if (measurement.unit === 'm-cm') {
          // Convert total centimeters back to meters-centimeters format
          const totalCm = measurement.value;
          const meters = Math.floor(totalCm / 100);
          const centimeters = Math.round(totalCm % 100);
          displayValue = `${meters}-${centimeters}`;
          displayUnit = 'm-cm';
        } else {
          // For other units, round to 1 decimal place
          displayValue = Math.round(measurement.value * 10) / 10;
        }
        
        return `
          <div class="flex items-center justify-between p-3 bg-white/50 dark:bg-slate-800/50 rounded-lg">
            <div class="flex items-center">
              <i class="fas fa-chart-line text-blue-500 text-xl mr-3"></i>
              <div>
                <div class="font-semibold text-primary">${measurementNames[measurement.type]}</div>
                <div class="text-sm text-secondary">${displayValue} ${displayUnit}</div>
              </div>
            </div>
            <div class="text-sm text-secondary">${new Date(measurement.date).toLocaleDateString()}</div>
          </div>
        `;
      }).join('');
      
      // Auto-show weight chart if available
      const weightData = growthData.filter(m => m.type === 'weight');
      if (weightData.length > 0) {
        showGrowthChart('weight');
      }
    }
    // --- TOT REPORT ---
    function generateTotReport() {
      const reportDate = document.getElementById('report-date').value;
      if (!reportDate) return;
      
      const container = $('#tot-report-content');
      if (!container) return;
      
      const selectedDate = new Date(reportDate);
      const startOfDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());
      const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000);
      
      // Filter activities for the selected date
      const dayActivities = activityLog.filter(entry => {
        const entryDate = new Date(entry.timestamp);
        return entryDate >= startOfDay && entryDate < endOfDay;
      });
      
      if (dayActivities.length === 0) {
        container.innerHTML = '<p class="text-secondary text-center py-8">No activities recorded for this date.</p>';
        return;
      }
      
      // Group activities by type
      const activityCounts = {};
      const moodEntries = [];
      const feedTimes = [];
      const feedQuantities = [];
      const diaperTimes = [];
      const sleepTimes = [];
      
      dayActivities.forEach(entry => {
        const activity = [...defaultActivities, ...customActivities].find(a => a.id === entry.type);
        const activityName = activity ? activity.name : entry.type;
        
        activityCounts[activityName] = (activityCounts[activityName] || 0) + 1;
        
        if (entry.mood) {
          moodEntries.push(entry.mood);
        }
        
        // Track specific activity times for detailed analysis
        if (entry.type === 'feed') {
          feedTimes.push(new Date(entry.timestamp));
          if (entry.quantity) {
            feedQuantities.push(entry.quantity);
          }
        } else if (entry.type === 'diaper') {
          diaperTimes.push(new Date(entry.timestamp));
        } else if (entry.type === 'sleep' || entry.type === 'nap') {
          sleepTimes.push(new Date(entry.timestamp));
        }
      });
      
      let html = `
        <div class="bg-white/50 dark:bg-slate-800/50 rounded-lg p-4">
          <h3 class="font-bold text-lg mb-4">Daily Summary for ${selectedDate.toLocaleDateString()}</h3>
          <div class="space-y-4">
      `;
      
      // Activity summary
      html += '<div><h4 class="font-semibold text-primary mb-2">Activities:</h4>';
      Object.entries(activityCounts).forEach(([activity, count]) => {
        html += `<div class="flex justify-between text-sm"><span>${activity}</span><span class="font-medium">${count}</span></div>`;
      });
      html += '</div>';
      
      // Feeding analysis
      if (feedTimes.length > 0) {
        html += '<div><h4 class="font-semibold text-primary mb-2">Feeding Analysis:</h4>';
        html += `<div class="text-sm">Total feeds: ${feedTimes.length}</div>`;
        
        // Add quantity analysis
        if (feedQuantities.length > 0) {
          const totalQuantity = feedQuantities.reduce((sum, qty) => sum + qty, 0);
          const avgQuantity = Math.round((totalQuantity / feedQuantities.length) * 10) / 10;
          html += `<div class="text-sm">Total intake: ${totalQuantity} oz</div>`;
          html += `<div class="text-sm">Average per feed: ${avgQuantity} oz</div>`;
        }
        
        if (feedTimes.length > 1) {
          const intervals = [];
          for (let i = 1; i < feedTimes.length; i++) {
            const interval = (feedTimes[i] - feedTimes[i-1]) / (1000 * 60); // minutes
            intervals.push(interval);
          }
          const avgInterval = Math.round(intervals.reduce((a, b) => a + b, 0) / intervals.length);
          html += `<div class="text-sm">Average interval: ${avgInterval} minutes</div>`;
        }
        
        const lastFeed = feedTimes[feedTimes.length - 1];
        const timeSinceLastFeed = Math.round((new Date() - lastFeed) / (1000 * 60));
        html += `<div class="text-sm">Time since last feed: ${timeSinceLastFeed} minutes</div>`;
        html += '</div>';
      }
      
      // Diaper analysis
      if (diaperTimes.length > 0) {
        html += '<div><h4 class="font-semibold text-primary mb-2">Diaper Analysis:</h4>';
        html += `<div class="text-sm">Total changes: ${diaperTimes.length}</div>`;
        
        const lastDiaper = diaperTimes[diaperTimes.length - 1];
        const timeSinceLastDiaper = Math.round((new Date() - lastDiaper) / (1000 * 60));
        html += `<div class="text-sm">Time since last change: ${timeSinceLastDiaper} minutes</div>`;
        html += '</div>';
      }
      
      // Sleep analysis
      if (sleepTimes.length > 0) {
        html += '<div><h4 class="font-semibold text-primary mb-2">Sleep Analysis:</h4>';
        html += `<div class="text-sm">Total sleep sessions: ${sleepTimes.length}</div>`;
        html += '</div>';
      }
      
      // Mood summary
      if (moodEntries.length > 0) {
        const moodCounts = {};
        moodEntries.forEach(mood => {
          moodCounts[mood] = (moodCounts[mood] || 0) + 1;
        });
        
        html += '<div><h4 class="font-semibold text-primary mb-2">Mood Summary:</h4>';
        Object.entries(moodCounts).forEach(([mood, count]) => {
          html += `<div class="flex justify-between text-sm"><span>${mood}</span><span class="font-medium">${count}</span></div>`;
        });
        html += '</div>';
      }
      
      html += '</div></div>';
      container.innerHTML = html;
      
      // Update daily stats panel
      updateDailyStats(selectedDate);
    }
    
    function updateDailyStats(selectedDate) {
      const startOfDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());
      const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000);
      
      // Filter activities for the selected date
      const dayActivities = activityLog.filter(entry => {
        const entryDate = new Date(entry.timestamp);
        return entryDate >= startOfDay && entryDate < endOfDay;
      });
      
      // Feeding stats
      const feedActivities = dayActivities.filter(entry => entry.type === 'feed');
      const feedTimes = feedActivities.map(entry => new Date(entry.timestamp));
      
      document.getElementById('stats-feeds').textContent = feedActivities.length;
      
      // Calculate total feed quantity
      const totalQuantity = feedActivities.reduce((sum, entry) => {
        return sum + (entry.quantity || 0);
      }, 0);
      document.getElementById('stats-feed-quantity').textContent = `${totalQuantity} oz`;
      
      if (feedTimes.length > 0) {
        const lastFeed = feedTimes[feedTimes.length - 1];
        const timeSinceLastFeed = Math.round((new Date() - lastFeed) / (1000 * 60));
        document.getElementById('stats-last-feed').textContent = `${timeSinceLastFeed}m ago`;
        
        if (feedTimes.length > 1) {
          const intervals = [];
          for (let i = 1; i < feedTimes.length; i++) {
            const interval = (feedTimes[i] - feedTimes[i-1]) / (1000 * 60);
            intervals.push(interval);
          }
          const avgInterval = Math.round(intervals.reduce((a, b) => a + b, 0) / intervals.length);
          document.getElementById('stats-feed-interval').textContent = `${avgInterval}m`;
        } else {
          document.getElementById('stats-feed-interval').textContent = '-';
        }
      } else {
        document.getElementById('stats-last-feed').textContent = '-';
        document.getElementById('stats-feed-interval').textContent = '-';
      }
      
      // Diaper stats
      const diaperActivities = dayActivities.filter(entry => entry.type === 'diaper');
      const diaperTimes = diaperActivities.map(entry => new Date(entry.timestamp));
      
      document.getElementById('stats-diapers').textContent = diaperActivities.length;
      
      if (diaperTimes.length > 0) {
        const lastDiaper = diaperTimes[diaperTimes.length - 1];
        const timeSinceLastDiaper = Math.round((new Date() - lastDiaper) / (1000 * 60));
        document.getElementById('stats-last-diaper').textContent = `${timeSinceLastDiaper}m ago`;
      } else {
        document.getElementById('stats-last-diaper').textContent = '-';
      }
      
      // For now, we'll estimate wet/dirty based on total (this could be enhanced with specific tracking)
      const estimatedWet = Math.floor(diaperActivities.length * 0.7);
      const estimatedDirty = Math.floor(diaperActivities.length * 0.3);
      document.getElementById('stats-wet-diapers').textContent = estimatedWet;
      document.getElementById('stats-dirty-diapers').textContent = estimatedDirty;
      
      // Sleep stats
      const sleepActivities = dayActivities.filter(entry => entry.type === 'sleep' || entry.type === 'nap');
      const napActivities = dayActivities.filter(entry => entry.type === 'nap');
      
      document.getElementById('stats-naps').textContent = napActivities.length;
      
      // Calculate total sleep time (this is simplified - could be enhanced with duration tracking)
      const totalSleepHours = sleepActivities.length * 2; // Estimate 2 hours per sleep session
      document.getElementById('stats-sleep-time').textContent = `${totalSleepHours}h`;
      
      if (napActivities.length > 0) {
        document.getElementById('stats-avg-nap').textContent = '2h'; // Estimate
      } else {
        document.getElementById('stats-avg-nap').textContent = '-';
      }
      
      // Inventory stats
      document.getElementById('stats-diapers-left').textContent = inventory.diapers;
      document.getElementById('stats-wipes-left').textContent = inventory.wipes;
      document.getElementById('stats-formula-left').textContent = inventory.formula;
    }
    // --- TIMER FUNCTIONALITY ---
    function selectTimerActivity(activityType) {
      if (timerState.isRunning) {
        alert('Please stop the current timer before selecting a new activity.');
        return;
      }
      
      timerState.currentActivity = activityType;
      
      // Update UI to show selected activity
      document.querySelectorAll('.timer-activity-btn').forEach(btn => {
        btn.classList.remove('border-blue-500', 'bg-blue-100');
      });
      
      const selectedBtn = document.querySelector(`[onclick="selectTimerActivity('${activityType}')"]`);
      if (selectedBtn) {
        selectedBtn.classList.add('border-blue-500', 'bg-blue-100');
      }
      
      // Update status
      const activityNames = {
        'sleep': 'Sleep',
        'nap': 'Nap',
        'tummy': 'Tummy Time'
      };
      document.getElementById('timer-status').textContent = `Ready to start: ${activityNames[activityType]}`;
      document.getElementById('timer-activity').textContent = `Activity: ${activityNames[activityType]}`;
    }
    
    function startTimer() {
      if (!timerState.currentActivity) {
        alert('Please select an activity first.');
        return;
      }
      
      if (timerState.isRunning) {
        alert('Timer is already running.');
        return;
      }
      
      timerState.isRunning = true;
      timerState.startTime = new Date();
      timerState.elapsed = 0;
      
      // Update UI
      document.getElementById('start-timer-btn').classList.add('hidden');
      document.getElementById('stop-timer-btn').classList.remove('hidden');
      document.getElementById('timer-display').classList.remove('hidden');
      document.getElementById('timer-selection').classList.add('hidden');
      
      const activityNames = {
        'sleep': 'Sleep',
        'nap': 'Nap',
        'tummy': 'Tummy Time'
      };
      document.getElementById('timer-status').textContent = `Timing: ${activityNames[timerState.currentActivity]}`;
      
      // Start the timer interval
      timerState.interval = setInterval(updateTimerDisplay, 1000);
    }
    
    function stopTimer() {
      if (!timerState.isRunning) {
        alert('No timer is running.');
        return;
      }
      
      // Stop the timer
      clearInterval(timerState.interval);
      timerState.isRunning = false;
      
      // Calculate duration
      const endTime = new Date();
      const duration = Math.floor((endTime - timerState.startTime) / 1000);
      
      // Log the activity
      const activityNames = {
        'sleep': 'Sleep',
        'nap': 'Nap',
        'tummy': 'Tummy Time'
      };
      
      const notes = `Duration: ${formatDuration(duration)}`;
      addEntry(timerState.currentActivity, timerState.startTime.toISOString(), notes);
      
      // Reset UI
      document.getElementById('start-timer-btn').classList.remove('hidden');
      document.getElementById('stop-timer-btn').classList.add('hidden');
      document.getElementById('timer-display').classList.add('hidden');
      document.getElementById('timer-selection').classList.remove('hidden');
      
      // Clear selection
      document.querySelectorAll('.timer-activity-btn').forEach(btn => {
        btn.classList.remove('border-blue-500', 'bg-blue-100');
      });
      
      document.getElementById('timer-status').textContent = 'No active timer';
      timerState.currentActivity = null;
      timerState.startTime = null;
      timerState.interval = null;
      timerState.elapsed = 0;
    }
    
    function updateTimerDisplay() {
      if (!timerState.isRunning || !timerState.startTime) return;
      
      const now = new Date();
      const elapsed = Math.floor((now - timerState.startTime) / 1000);
      timerState.elapsed = elapsed;
      
      document.getElementById('timer-time').textContent = formatDuration(elapsed);
    }
    
    function formatDuration(seconds) {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const secs = seconds % 60;
      
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    
    function startQuickTimer(activityType, durationMinutes) {
      if (timerState.isRunning) {
        alert('Please stop the current timer first.');
        return;
      }
      
      timerState.currentActivity = activityType;
      timerState.isRunning = true;
      timerState.startTime = new Date();
      timerState.elapsed = 0;
      
      // Set up countdown timer
      const targetTime = new Date(timerState.startTime.getTime() + (durationMinutes * 60 * 1000));
      timerState.targetTime = targetTime;
      
      // Update UI
      document.getElementById('start-timer-btn').classList.add('hidden');
      document.getElementById('stop-timer-btn').classList.remove('hidden');
      document.getElementById('timer-display').classList.remove('hidden');
      document.getElementById('timer-selection').classList.add('hidden');
      
      const activityNames = {
        'sleep': 'Sleep',
        'nap': 'Nap',
        'tummy': 'Tummy Time'
      };
      document.getElementById('timer-status').textContent = `Timing: ${activityNames[activityType]} (${durationMinutes} min)`;
      document.getElementById('timer-activity').textContent = `Activity: ${activityNames[activityType]}`;
      
      // Start the timer interval
      timerState.interval = setInterval(() => {
        updateCountdownTimer();
      }, 1000);
      
      hideModal('timer-settings-modal');
    }
    
    function updateCountdownTimer() {
      if (!timerState.isRunning || !timerState.targetTime) return;
      
      const now = new Date();
      const remaining = Math.max(0, Math.floor((timerState.targetTime - now) / 1000));
      
      if (remaining <= 0) {
        // Timer finished
        stopTimer();
        showTimerCompleteNotification();
        return;
      }
      
      document.getElementById('timer-time').textContent = formatDuration(remaining);
    }
    
    function showTimerCompleteNotification() {
      const activityNames = {
        'sleep': 'Sleep',
        'nap': 'Nap',
        'tummy': 'Tummy Time'
      };
      
      const activityName = activityNames[timerState.currentActivity] || 'Activity';
      
      // Create notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 animate-bounce';
      notification.innerHTML = `
        <div class="flex items-center space-x-3">
          <i class="fas fa-bell text-2xl"></i>
          <div>
            <div class="font-bold">Timer Complete!</div>
            <div class="text-sm">${activityName} session finished</div>
          </div>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Remove notification after 5 seconds
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 5000);
    }
    // --- BACKUP & RESTORE ---
    function exportData() {
      const data = {
        profiles: babyProfiles,
        currentProfileId: currentProfileId,
        activityLog: activityLog,
        moodAnalytics: moodAnalytics,
        customActivities: customActivities,
        milestones: milestones,
        growthData: growthData,
        feedingSchedules: feedingSchedules,
        reminders: reminders,
        appointments: appointments,
        exportDate: new Date().toISOString()
      };
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `littlesprout-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      alert('Data exported successfully!');
    }
    function importData(file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const data = JSON.parse(e.target.result);
          
          if (data.profiles && data.activityLog !== undefined) {
            babyProfiles = data.profiles || [];
            currentProfileId = data.currentProfileId;
            activityLog = data.activityLog || [];
            moodAnalytics = data.moodAnalytics || { total: 0, moods: {} };
            customActivities = data.customActivities || [];
            milestones = data.milestones || [];
            growthData = data.growthData || [];
            feedingSchedules = data.feedingSchedules || [];
            reminders = data.reminders || [];
            appointments = data.appointments || [];
            
            saveProfiles();
            saveData();
            initializeApp();
            
            alert('Data imported successfully!');
            hideModal('backup-modal');
          } else {
            alert('Invalid backup file format.');
          }
        } catch (error) {
          console.error('Import error:', error);
          alert('Error importing data. Please check the file format.');
        }
      };
      reader.readAsText(file);
    }
    // --- DOM HELPERS ---
    const $ = (sel, p = document) => p.querySelector(sel);
    // --- ACTIVITY CAROUSEL ---
    function renderActivityButtons() {
      const container = $('#main-activity-buttons');
      const allActivities = [...defaultActivities, ...customActivities];
      if (!container) return;
      let html = '<div class="flex space-x-4 px-2 overflow-x-auto">';
      allActivities.forEach(act => {
        html += `<button onclick="quickLogActivity('${act.id}')" class="flex-shrink-0 flex flex-col items-center justify-center h-20 w-20 input-enhanced rounded-lg hover:bg-slate-200 dark:hover:bg-slate-700/50 transition-all duration-300 transform hover:scale-105 focus-visible">
          <i class="${act.icon} text-${act.color} text-2xl mb-1"></i>
          <span class="font-semibold text-xs text-center">${act.name}</span>
        </button>`;
      });
      html += '</div>';
      container.innerHTML = html;
    }
    function quickLogActivity(activityType) {
      const now = new Date();
      const timestamp = now.toISOString().slice(0, 16); // Format for datetime-local input
      document.getElementById('activity-type').value = activityType;
      document.getElementById('activity-time').value = timestamp;
      document.getElementById('activity-notes').value = '';
      
      // Show quantity section if it's a feed activity
      const quantitySection = document.getElementById('feed-quantity-section');
      if (activityType === 'feed') {
        quantitySection.classList.remove('hidden');
        document.getElementById('feed-type').value = '';
        document.getElementById('feed-quantity').value = '';
      } else {
        quantitySection.classList.add('hidden');
      }
      
      // Show mood section if it's a mood activity
      const moodSection = document.getElementById('mood-section');
      if (activityType === 'mood') {
        moodSection.classList.remove('hidden');
      } else {
        moodSection.classList.add('hidden');
      }
      
      showModal('log-modal');
    }
    // --- CLOCK & WEATHER ---
    function startDateTime() {
      const mainTimeEl = $('#main-time-display'), mainAmpmEl = $('#main-ampm-display'), mainDateEl = $('#main-date-display');
      setInterval(() => {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
        mainTimeEl.textContent = timeString.slice(0, -3);
        mainAmpmEl.textContent = timeString.slice(-2);
        mainDateEl.textContent = now.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
      }, 1000);
    }
    async function fetchWeather(lat = 28.11, lon = -81.62) {
      const mainWeather = $('#main-weather-display');
      if (!mainWeather) return;
      mainWeather.innerHTML = `<div class="flex items-center justify-center md:justify-end"><i class="fas fa-spinner fa-spin text-blue-400 mr-2"></i><span class="text-xs">Loading weather...</span></div>`;
      try {
        const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,weather_code&temperature_unit=fahrenheit`;
        const res = await fetch(url);
        if (!res.ok) throw new Error('Weather service not available');
        const data = await res.json();
        const temp = Math.round(data.current.temperature_2m);
        const desc = getWeatherDescription(data.current.weather_code);
        const { icon, color } = getWeatherIconClass(data.current.weather_code);
        mainWeather.innerHTML = `<div class="flex items-center justify-center md:justify-end flex-wrap gap-2">
          <i class="fas ${icon} text-3xl ${color}"></i>
          <div class="weather-info text-center md:text-right overflow-hidden">
            <p class="weather-temp font-bold text-xl leading-none">${temp}°F</p>
            <p class="weather-desc text-sm leading-tight">${desc}</p>
          </div>
        </div>`;
      } catch {
        mainWeather.innerHTML = `<div class="flex items-center justify-center md:justify-end"><i class="fas fa-exclamation-triangle text-orange-400 mr-2"></i><span class="text-xs">Weather unavailable</span></div>`;
      }
    }
    function getWeatherDescription(code) {
      const codes = {0:"Clear Sky",1:"Mainly Clear",2:"Partly Cloudy",3:"Overcast",45:"Fog",48:"Rime Fog",51:"Light Drizzle",53:"Drizzle",55:"Dense Drizzle",61:"Slight Rain",63:"Rain",65:"Heavy Rain",80:"Showers",81:"Showers",82:"Heavy Showers",95:"Thunderstorm"};
      return codes[code] || "Unknown";
    }
    function getWeatherIconClass(code) {
      if (code === 0) return { icon: 'fa-sun', color: 'text-yellow-400' };
      if (code >= 1 && code <= 3) return { icon: 'fa-cloud-sun', color: 'text-gray-400' };
      if (code === 45 || code === 48) return { icon: 'fa-smog', color: 'text-gray-500' };
      if ((code >= 51 && code <= 67) || (code >= 80 && code <= 82)) return { icon: 'fa-cloud-showers-heavy', color: 'text-blue-400' };
      if (code >= 95 && code <= 99) return { icon: 'fa-bolt', color: 'text-yellow-500' };
      return { icon: 'fa-question-circle', color: 'text-gray-400' };
    }
    // --- THEME TOGGLE ---
    function toggleDarkMode() {
      const isDark = document.documentElement.classList.toggle('dark');
      localStorage.setItem('darkMode', isDark);
      const btn = document.querySelector('button[onclick="toggleDarkMode()"] i');
      if (btn) {
        btn.className = isDark ? 'fas fa-sun text-yellow-500 text-2xl' : 'fas fa-moon text-indigo-500 text-2xl';
      }
    }
    // --- MODAL HELPERS ---
    function showModal(id) {
      const modal = document.getElementById(id);
      if (modal) {
        modal.classList.remove('opacity-0', 'pointer-events-none');
      }
    }
    function hideModal(id) {
      const modal = document.getElementById(id);
      if (modal) {
        modal.classList.add('opacity-0', 'pointer-events-none');
      }
    }
    // --- ONBOARDING LOGIC ---
    function saveBabyInfo() {
      const userName = document.getElementById('user-name').value.trim();
      const babyName = document.getElementById('baby-name').value.trim();
      const dob = document.getElementById('baby-dob').value;
      if (!userName || !babyName || !dob) {
        alert('Please fill in all fields.');
        return;
      }
      const newProfile = { id: Date.now().toString(), userName, babyName, dob };
      babyProfiles.push(newProfile);
      currentProfileId = newProfile.id;
      saveProfiles();
      hideModal('setup-modal');
      initializeApp();
    }
    function showSetupForNewProfile() {
      document.getElementById('setup-title').textContent = 'Add New Profile';
      document.getElementById('setup-subtitle').textContent = 'Enter the details for the new baby.';
      document.getElementById('user-name').value = '';
      document.getElementById('baby-name').value = '';
      document.getElementById('baby-dob').value = '';
      showModal('setup-modal');
      hideModal('profile-modal');
    }
    function switchProfile() {
      currentProfileId = document.getElementById('profile-switcher').value;
      saveProfiles();
      initializeApp();
      hideModal('profile-modal');
    }
    function deleteCurrentProfile() {
      if (babyProfiles.length <= 1) {
        alert('You cannot delete the only profile.');
        return;
      }
      const profile = babyProfiles.find(p => p.id == currentProfileId);
      if (confirm(`Are you sure you want to delete ${profile.babyName}'s profile? All data will be lost forever.`)) {
        babyProfiles = babyProfiles.filter(p => p.id != profile.id);
        currentProfileId = babyProfiles.length > 0 ? babyProfiles[0].id : null;
        saveProfiles();
        initializeApp();
        hideModal('profile-modal');
      }
    }
    function populateProfileSwitcher() {
      const switcher = document.getElementById('profile-switcher');
      switcher.innerHTML = '';
      babyProfiles.forEach(p => {
        switcher.innerHTML += `<option value="${p.id}" ${p.id == currentProfileId ? 'selected' : ''}>${p.babyName}</option>`;
      });
    }
    function saveProfiles() {
      localStorage.setItem('babyProfiles', JSON.stringify(babyProfiles));
      localStorage.setItem('currentProfileId', currentProfileId);
    }
    function loadProfiles() {
      babyProfiles = JSON.parse(localStorage.getItem('babyProfiles') || '[]');
      currentProfileId = localStorage.getItem('currentProfileId');
      if (!currentProfileId && babyProfiles.length > 0) {
        currentProfileId = babyProfiles[0].id;
      }
    }
    function initializeApp() {
      loadProfiles();
      if (babyProfiles.length === 0) {
        showModal('welcome-modal');
        return;
      }
      loadData();
      populateProfileSwitcher();
      renderActivityLog();
      renderMoodAnalytics();
      updateMilestoneTicker();
      renderGrowthHistory();
      renderInventory();
      renderFeedingSchedule();
      renderReminders();
      renderAppointments();
      updateAppointmentStats();
      
      // Update header
      const profile = babyProfiles.find(p => p.id == currentProfileId);
      if (profile) {
        document.getElementById('header-title').textContent = `Hello, ${profile.userName}!`;
        document.getElementById('header-subtitle').textContent = `${profile.babyName} is ${calculatePreciseAge(profile.dob)}`;
      }
      
      // Update daily stats for today
      updateDailyStats(new Date());
      // Update header stats
      updateHeaderStats();
    }
    function calculatePreciseAge(dobString) {
      const dob = new Date(dobString), today = new Date();
      if (dob > today) return 'not born yet!';
      let years = today.getFullYear() - dob.getFullYear(), months = today.getMonth() - dob.getMonth(), days = today.getDate() - dob.getDate();
      if (days < 0) { months--; days += new Date(today.getFullYear(), today.getMonth(), 0).getDate(); }
      if (months < 0) { years--; months += 12; }
      if (years >= 2) return `${years} years old`;
      if (years > 0) return `${years} year${years > 1 ? 's' : ''} & ${months} month${months > 1 ? 's' : ''} old`;
      const totalDays = Math.floor((today - dob) / (1e3 * 60 * 60 * 24));
      if (totalDays < 7) return `${totalDays} day${totalDays !== 1 ? 's' : ''} old`;
      const weeks = Math.floor(totalDays / 7);
      if (months < 1) return `${weeks} week${weeks > 1 ? 's' : ''} old`;
      return `${months} month${months > 1 ? 's' : ''} old`;
    }
    // --- INVENTORY MANAGEMENT ---
    function updateInventory(itemType, action, quantity) {
      const currentAmount = inventory[itemType] || 0;
      
      switch (action) {
        case 'add':
          inventory[itemType] = currentAmount + quantity;
          break;
        case 'use':
          inventory[itemType] = Math.max(0, currentAmount - quantity);
          break;
        case 'set':
          inventory[itemType] = quantity;
          break;
      }
      
      saveData();
      renderInventory();
    }
    
    function renderInventory() {
      document.getElementById('diapers-count').textContent = inventory.diapers;
      document.getElementById('wipes-count').textContent = inventory.wipes;
      document.getElementById('formula-count').textContent = inventory.formula;
      document.getElementById('medicine-count').textContent = inventory.medicine;
      
      // Add visual indicators for low stock
      const lowStockThreshold = 5;
      Object.keys(inventory).forEach(item => {
        const countElement = document.getElementById(`${item}-count`);
        if (inventory[item] <= lowStockThreshold && inventory[item] > 0) {
          countElement.classList.add('text-orange-500');
          countElement.classList.remove('text-green-600');
        } else if (inventory[item] === 0) {
          countElement.classList.add('text-red-500');
          countElement.classList.remove('text-green-600', 'text-orange-500');
        } else {
          countElement.classList.add('text-green-600');
          countElement.classList.remove('text-orange-500', 'text-red-500');
        }
      });
    }
    // --- INIT ---
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize dark mode - default to dark mode
      const savedDarkMode = localStorage.getItem('darkMode');
      if (savedDarkMode === null || savedDarkMode === 'true') {
        // Default to dark mode if no preference saved or if it was previously enabled
        document.documentElement.classList.add('dark');
        localStorage.setItem('darkMode', 'true');
        // Update the toggle button icon
        const btn = document.querySelector('button[onclick="toggleDarkMode()"] i');
        if (btn) btn.className = 'fas fa-sun text-yellow-500 text-2xl';
      } else {
        // User has explicitly disabled dark mode
        document.documentElement.classList.remove('dark');
        const btn = document.querySelector('button[onclick="toggleDarkMode()"] i');
        if (btn) btn.className = 'fas fa-moon text-indigo-500 text-2xl';
      }
      
      renderActivityButtons();
      startDateTime();
      fetchWeather();
      loadProfiles();
      
      // Setup activity form
      const activityForm = document.getElementById('activity-form');
      if (activityForm) {
        activityForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const activityType = document.getElementById('activity-type').value;
          const activityTime = document.getElementById('activity-time').value;
          const activityNotes = document.getElementById('activity-notes').value;
          
          if (!activityType || !activityTime) {
            alert('Please fill in all required fields.');
            return;
          }
          
          // Get selected mood if it's a mood activity
          let selectedMood = null;
          if (activityType === 'mood') {
            const selectedMoodBtn = document.querySelector('.mood-btn.selected');
            if (selectedMoodBtn) {
              selectedMood = selectedMoodBtn.dataset.mood;
            }
          }
          
          // Get quantity if it's a feed activity
          let quantity = null;
          let feedType = null;
          if (activityType === 'feed') {
            const quantityInput = document.getElementById('feed-quantity');
            const feedTypeInput = document.getElementById('feed-type');
            if (quantityInput && quantityInput.value) {
              quantity = parseFloat(quantityInput.value);
            }
            if (feedTypeInput && feedTypeInput.value) {
              feedType = feedTypeInput.value;
            }
          }
          
          addEntry(activityType, activityTime, activityNotes, selectedMood, quantity, feedType);
          hideModal('log-modal');
          this.reset();
          document.getElementById('feed-quantity-section').classList.add('hidden');
        });
      }
      
      // Setup mood selection
      document.querySelectorAll('.mood-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.mood-btn').forEach(b => b.classList.remove('selected', 'scale-125'));
          this.classList.add('selected', 'scale-125');
        });
      });
      
      // Populate activity type dropdown
      const activityTypeSelect = document.getElementById('activity-type');
      if (activityTypeSelect) {
        const allActivities = [...defaultActivities, ...customActivities];
        activityTypeSelect.innerHTML = '<option value="">Select activity...</option>' + 
          allActivities.map(act => `<option value="${act.id}">${act.name}</option>`).join('');
      }
      
      // Populate edit activity type dropdown
      const editActivityTypeSelect = document.getElementById('edit-activity-type');
      if (editActivityTypeSelect) {
        const allActivities = [...defaultActivities, ...customActivities];
        editActivityTypeSelect.innerHTML = '<option value="">Select activity...</option>' + 
          allActivities.map(act => `<option value="${act.id}">${act.name}</option>`).join('');
      }
      
      // Setup feed type and quantity change handlers for inventory impact
      const feedTypeSelect = document.getElementById('feed-type');
      const feedQuantityInput = document.getElementById('feed-quantity');
      
      if (feedTypeSelect) {
        feedTypeSelect.addEventListener('change', function() {
          updateFeedInventoryImpact();
        });
      }
      
      if (feedQuantityInput) {
        feedQuantityInput.addEventListener('input', function() {
          updateFeedInventoryImpact();
        });
      }
      
      // Setup file import
      const restoreFileInput = document.getElementById('restore-file');
      if (restoreFileInput) {
        restoreFileInput.addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (file) {
            importData(file);
            this.value = ''; // Reset input
          }
        });
      }
      
      // Setup milestone form
      const milestoneForm = document.getElementById('milestone-form');
      if (milestoneForm) {
        milestoneForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const type = document.getElementById('milestone-type').value;
          const date = document.getElementById('milestone-date').value;
          const notes = document.getElementById('milestone-notes').value;
          const customText = document.getElementById('custom-milestone-text').value;
          
          if (!type || !date) {
            alert('Please fill in all required fields.');
            return;
          }
          
          addMilestone(type, date, notes, customText);
          hideModal('milestone-modal');
          this.reset();
          document.getElementById('custom-milestone-input').classList.add('hidden');
        });
      }
      
      // Setup milestone type change handler
      const milestoneTypeSelect = document.getElementById('milestone-type');
      if (milestoneTypeSelect) {
        milestoneTypeSelect.addEventListener('change', function() {
          const customInput = document.getElementById('custom-milestone-input');
          if (this.value === 'custom') {
            customInput.classList.remove('hidden');
          } else {
            customInput.classList.add('hidden');
          }
        });
      }
      
      // Setup growth form
      const growthForm = document.getElementById('growth-form');
      if (growthForm) {
        growthForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const type = document.getElementById('measurement-type').value;
          const value = document.getElementById('measurement-value').value;
          const unit = document.getElementById('measurement-unit').value;
          const date = document.getElementById('measurement-date').value;
          
          if (!type || !value || !unit || !date) {
            alert('Please fill in all required fields.');
            return;
          }
          
          // Validate the measurement value
          if (!validateMeasurementValue(value, type, unit)) {
            alert('Please enter a valid measurement value. Check the format hints below the input field.');
            return;
          }
          
          // Parse the measurement value
          const parsedValue = parseMeasurementValue(value, type, unit);
          if (parsedValue === null) {
            alert('Unable to parse the measurement value. Please check the format and try again.');
            return;
          }
          
          addGrowthMeasurement(type, parsedValue, unit, date);
          this.reset();
          updateMeasurementFields(); // Reset the dynamic fields
        });
      }
      
      // Setup custom timer form
      const customTimerForm = document.getElementById('custom-timer-form');
      if (customTimerForm) {
        customTimerForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const activity = document.getElementById('custom-timer-activity').value;
          const duration = document.getElementById('custom-timer-duration').value;
          
          if (!activity || !duration) {
            alert('Please fill in all required fields.');
            return;
          }
          
          const durationNum = parseInt(duration);
          if (durationNum < 1 || durationNum > 480) {
            alert('Duration must be between 1 and 480 minutes.');
            return;
          }
          
          startQuickTimer(activity, durationNum);
          this.reset();
        });
      }
      
      // Setup inventory form
      const inventoryForm = document.getElementById('inventory-form');
      if (inventoryForm) {
        inventoryForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const itemType = document.getElementById('inventory-item-type').value;
          const quantity = parseInt(document.getElementById('inventory-quantity').value);
          const action = document.getElementById('inventory-action').value;
          
          if (!itemType || isNaN(quantity) || quantity < 0) {
            alert('Please fill in all required fields with valid values.');
            return;
          }
          
          updateInventory(itemType, action, quantity);
          this.reset();
          hideModal('inventory-modal');
        });
      }
      
      // Setup activity editor form
      const activityEditorForm = document.getElementById('activity-editor-form');
      if (activityEditorForm) {
        activityEditorForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const activityId = document.getElementById('edit-activity-id').value;
          const activityType = document.getElementById('edit-activity-type').value;
          const activityTime = document.getElementById('edit-activity-time').value;
          const activityNotes = document.getElementById('edit-activity-notes').value;
          
          if (!activityId || !activityType || !activityTime) {
            alert('Please fill in all required fields.');
            return;
          }
          
          // Find and update the activity
          const activityIndex = activityLog.findIndex(entry => entry.id === activityId);
          if (activityIndex === -1) {
            alert('Activity not found.');
            return;
          }
          
          // Get selected mood if it's a mood activity
          let selectedMood = null;
          if (activityType === 'mood') {
            const selectedMoodBtn = document.querySelector('.edit-mood-btn.selected');
            if (selectedMoodBtn) {
              selectedMood = selectedMoodBtn.dataset.mood;
            }
          }
          
          // Get quantity if it's a feed activity
          let quantity = null;
          let feedType = null;
          if (activityType === 'feed') {
            const quantityInput = document.getElementById('edit-feed-quantity');
            const feedTypeInput = document.getElementById('edit-feed-type');
            if (quantityInput && quantityInput.value) {
              quantity = parseFloat(quantityInput.value);
            }
            if (feedTypeInput && feedTypeInput.value) {
              feedType = feedTypeInput.value;
            }
          }
          
          // Get the old activity data for inventory restoration
          const oldActivity = activityLog[activityIndex];
          
          // Restore inventory from the old activity
          restoreInventoryFromActivity(oldActivity.type, oldActivity.quantity, oldActivity.feedType);
          
          // Update the activity
          activityLog[activityIndex] = {
            ...activityLog[activityIndex],
            type: activityType,
            timestamp: activityTime,
            notes: activityNotes,
            mood: selectedMood,
            quantity: quantity,
            feedType: feedType
          };
          
          // Deduct inventory for the new activity
          deductInventoryForActivity(activityType, quantity, feedType);
          
          saveData();
          renderActivityLog();
          renderMoodAnalytics();
          hideModal('activity-editor-modal');
        });
      }
      
      // Setup edit mood selection
      document.querySelectorAll('.edit-mood-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.edit-mood-btn').forEach(b => b.classList.remove('selected', 'scale-125'));
          this.classList.add('selected', 'scale-125');
        });
      });
      
      // Setup feeding schedule form
      const addScheduleForm = document.getElementById('add-schedule-form');
      if (addScheduleForm) {
        addScheduleForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const type = document.getElementById('schedule-feeding-type').value;
          const time = document.getElementById('schedule-time').value;
          const notes = document.getElementById('schedule-notes').value;
          const repeat = document.getElementById('schedule-repeat').value;
          
          if (!type || !time) {
            alert('Please fill in all required fields.');
            return;
          }
          
          addFeedingSchedule(type, time, notes, repeat);
          this.reset();
          hideModal('add-schedule-modal');
        });
      }
      
      // Setup reminder form
      const addReminderForm = document.getElementById('add-reminder-form');
      if (addReminderForm) {
        addReminderForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const type = document.getElementById('reminder-type').value;
          const time = document.getElementById('reminder-time').value;
          const date = document.getElementById('reminder-date').value;
          const notes = document.getElementById('reminder-notes').value;
          const repeat = document.getElementById('reminder-repeat').value;
          const customText = document.getElementById('custom-reminder-text').value;
          
          if (!type || !time || !date) {
            alert('Please fill in all required fields.');
            return;
          }
          
          addReminder(type, time, date, notes, repeat, customText);
          this.reset();
          hideModal('add-reminder-modal');
        });
      }
      
      // Setup reminder type change handler
      const reminderTypeSelect = document.getElementById('reminder-type');
      if (reminderTypeSelect) {
        reminderTypeSelect.addEventListener('change', function() {
          const customInput = document.getElementById('custom-reminder-input');
          if (this.value === 'custom') {
            customInput.classList.remove('hidden');
          } else {
            customInput.classList.add('hidden');
          }
        });
      }
      
      // Setup appointment form
      const addAppointmentForm = document.getElementById('add-appointment-form');
      if (addAppointmentForm) {
        addAppointmentForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const date = document.getElementById('appointment-date').value;
          const time = document.getElementById('appointment-time').value;
          const doctorName = document.getElementById('doctor-name').value;
          const type = document.getElementById('appointment-type').value;
          const location = document.getElementById('appointment-location').value;
          const reason = document.getElementById('appointment-reason').value;
          const notes = document.getElementById('appointment-notes').value;
          const reminder = document.getElementById('appointment-reminder').value;
          const status = document.getElementById('appointment-status').value;
          
          if (!date || !time || !doctorName || !type || !location || !reason) {
            alert('Please fill in all required fields.');
            return;
          }
          
          addAppointment(date, time, doctorName, type, location, reason, notes, reminder, status);
          this.reset();
          hideModal('add-appointment-modal');
        });
      }
      
      // Setup visit summary form
      const visitSummaryForm = document.getElementById('visit-summary-form');
      if (visitSummaryForm) {
        visitSummaryForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const appointmentId = document.getElementById('summary-appointment-id').value;
          const diagnosis = document.getElementById('visit-diagnosis').value;
          const treatment = document.getElementById('visit-treatment').value;
          const medications = document.getElementById('visit-medications').value;
          const followup = document.getElementById('visit-followup').value;
          const notes = document.getElementById('visit-notes').value;
          
          const appointment = appointments.find(a => a.id === appointmentId);
          if (!appointment) return;
          
          appointment.visitSummary = {
            diagnosis: diagnosis,
            treatment: treatment,
            medications: medications,
            followup: followup,
            notes: notes,
            timestamp: new Date().toISOString()
          };
          
          saveData();
          viewAppointmentDetails(appointmentId); // Refresh the view
          this.reset();
        });
      }
      
      // Update tot report button to use enhanced function
      const totReportButton = document.querySelector('[onclick="showModal(\'tot-report-modal\')"]');
      if (totReportButton) {
        totReportButton.onclick = showTotReportModal;
      }
      
      // Setup reset confirmation
      setupResetConfirmation();
      
      if (babyProfiles.length === 0) {
        showModal('welcome-modal');
      } else {
        initializeApp();
      }
    });
    // Expose for modal buttons
    window.showModal = showModal;
    window.hideModal = hideModal;
    window.saveBabyInfo = saveBabyInfo;
    window.showSetupForNewProfile = showSetupForNewProfile;
    window.switchProfile = switchProfile;
    window.deleteCurrentProfile = deleteCurrentProfile;
    window.quickLogActivity = quickLogActivity;
    window.exportData = exportData;
    window.importData = importData;
    window.generateTotReport = generateTotReport;
    window.selectTimerActivity = selectTimerActivity;
    window.startTimer = startTimer;
    window.stopTimer = stopTimer;
    window.startQuickTimer = startQuickTimer;
    window.updateInventory = updateInventory;
    window.quickInventoryAction = quickInventoryAction;
    window.editActivity = editActivity;
    window.deleteActivity = deleteActivity;
    window.markFeedingComplete = markFeedingComplete;
    window.deleteFeedingSchedule = deleteFeedingSchedule;
    window.markReminderComplete = markReminderComplete;
    window.deleteReminder = deleteReminder;
    window.viewAppointmentDetails = viewAppointmentDetails;
    window.markAppointmentComplete = markAppointmentComplete;
    window.deleteAppointment = deleteAppointment;
    window.confirmResetApp = confirmResetApp;
    window.showResetAppModal = showResetAppModal;
    window.updateMeasurementFields = updateMeasurementFields;
    window.showGrowthChart = showGrowthChart;
    window.toggleFeedQuantityField = toggleFeedQuantityField;
    window.toggleEditFeedQuantityField = toggleEditFeedQuantityField;
    
    // Enhanced modal functions
    function showTotReportModal() {
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('report-date').value = today;
      updateDailyStats(new Date());
      showModal('tot-report-modal');
    }
    
    function showResetAppModal() {
      // Clear any existing confirmation input
      const resetInput = document.getElementById('reset-confirmation');
      const resetBtn = document.getElementById('reset-confirm-btn');
      if (resetInput) {
        resetInput.value = '';
      }
      if (resetBtn) {
        resetBtn.disabled = true;
        resetBtn.classList.add('opacity-50', 'cursor-not-allowed');
      }
      showModal('reset-app-modal');
    }
    // --- ACTIVITY EDITING ---
    function editActivity(activityId) {
      const activity = activityLog.find(entry => entry.id === activityId);
      if (!activity) return;
      
      // Populate the edit form
      document.getElementById('edit-activity-id').value = activityId;
      document.getElementById('edit-activity-type').value = activity.type;
      document.getElementById('edit-activity-time').value = activity.timestamp.slice(0, 16);
      document.getElementById('edit-activity-notes').value = activity.notes || '';
      
      // Handle quantity section for feed activities
      const editQuantitySection = document.getElementById('edit-feed-quantity-section');
      if (activity.type === 'feed') {
        editQuantitySection.classList.remove('hidden');
        document.getElementById('edit-feed-quantity').value = activity.quantity || '';
        document.getElementById('edit-feed-type').value = activity.feedType || '';
      } else {
        editQuantitySection.classList.add('hidden');
      }
      
      // Handle mood section
      const editMoodSection = document.getElementById('edit-mood-section');
      if (activity.type === 'mood') {
        editMoodSection.classList.remove('hidden');
        // Set selected mood
        document.querySelectorAll('.edit-mood-btn').forEach(btn => {
          btn.classList.remove('selected', 'scale-125');
          if (btn.dataset.mood === activity.mood) {
            btn.classList.add('selected', 'scale-125');
          }
        });
      } else {
        editMoodSection.classList.add('hidden');
      }
      
      // Handle inventory status section
      const editInventorySection = document.getElementById('edit-inventory-status-section');
      if (editInventorySection) {
        if (activity.type === 'diaper' || activity.type === 'feed' || activity.type === 'medication') {
          editInventorySection.classList.remove('hidden');
          updateEditInventoryImpact(activity.type, activity.quantity, activity.feedType);
        } else {
          editInventorySection.classList.add('hidden');
        }
      }
      
      showModal('activity-editor-modal');
    }
    
    function deleteActivity() {
      const activityId = document.getElementById('edit-activity-id').value;
      if (!activityId) return;
      
      if (confirm('Are you sure you want to delete this activity? This action cannot be undone.')) {
        // Find the activity before removing it
        const deletedActivity = activityLog.find(entry => entry.id === activityId);
        
        if (deletedActivity) {
          // Restore inventory from the deleted activity
          restoreInventoryFromActivity(deletedActivity.type, deletedActivity.quantity, deletedActivity.feedType);
          
          // Update mood analytics if it was a mood activity
          if (deletedActivity.mood) {
            moodAnalytics.total = Math.max(0, moodAnalytics.total - 1);
            moodAnalytics.moods[deletedActivity.mood] = Math.max(0, (moodAnalytics.moods[deletedActivity.mood] || 0) - 1);
          }
        }
        
        // Remove from activity log
        activityLog = activityLog.filter(entry => entry.id !== activityId);
        
        saveData();
        renderActivityLog();
        renderMoodAnalytics();
        hideModal('activity-editor-modal');
      }
    }
    
    function quickInventoryAction(itemType, action, quantity) {
      updateInventory(itemType, action, quantity);
      hideModal('inventory-modal');
    }
    // --- FEEDING SCHEDULE ---
    function addFeedingSchedule(type, time, notes, repeat) {
      const schedule = {
        id: Date.now().toString(),
        type: type,
        time: time,
        notes: notes,
        repeat: repeat,
        date: new Date().toISOString().split('T')[0],
        timestamp: new Date().toISOString()
      };
      
      feedingSchedules.push(schedule);
      saveData();
      renderFeedingSchedule();
    }
    
    function renderFeedingSchedule() {
      const container = $('#feeding-schedule-list');
      if (!container) return;
      
      const today = new Date().toISOString().split('T')[0];
      const todaySchedules = feedingSchedules.filter(schedule => schedule.date === today);
      
      if (todaySchedules.length === 0) {
        container.innerHTML = '<p class="text-secondary text-center py-4">No feeding schedule set for today.</p>';
        return;
      }
      
      // Sort by time
      todaySchedules.sort((a, b) => a.time.localeCompare(b.time));
      
      container.innerHTML = todaySchedules.map(schedule => {
        const typeNames = {
          'breast': 'Breastfeeding',
          'bottle': 'Bottle Feeding',
          'solid': 'Solid Food',
          'snack': 'Snack'
        };
        
        const typeIcons = {
          'breast': 'fas fa-baby text-pink-500',
          'bottle': 'fas fa-baby-carriage text-purple-500',
          'solid': 'fas fa-utensils text-orange-500',
          'snack': 'fas fa-apple-alt text-green-500'
        };
        
        return `
          <div class="flex items-center justify-between p-3 bg-white/50 dark:bg-slate-800/50 rounded-lg">
            <div class="flex items-center">
              <i class="${typeIcons[schedule.type]} text-xl mr-3"></i>
              <div>
                <div class="font-semibold text-primary">${typeNames[schedule.type]}</div>
                <div class="text-sm text-secondary">${schedule.time}${schedule.notes ? ` - ${schedule.notes}` : ''}</div>
              </div>
            </div>
            <div class="flex items-center space-x-2">
              <button onclick="markFeedingComplete('${schedule.id}')" class="text-green-500 hover:text-green-700 transition-colors" title="Mark as complete">
                <i class="fas fa-check"></i>
              </button>
              <button onclick="deleteFeedingSchedule('${schedule.id}')" class="text-red-500 hover:text-red-700 transition-colors" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
      }).join('');
    }
    
    function markFeedingComplete(scheduleId) {
      const schedule = feedingSchedules.find(s => s.id === scheduleId);
      if (!schedule) return;
      
      // Add to activity log with feed type
      const feedType = schedule.type === 'breast' ? 'breast' : 'formula';
      addEntry('feed', new Date().toISOString(), `Scheduled: ${schedule.type} at ${schedule.time}${schedule.notes ? ` - ${schedule.notes}` : ''}`, null, null, feedType);
      
      // Remove from schedule
      feedingSchedules = feedingSchedules.filter(s => s.id !== scheduleId);
      saveData();
      renderFeedingSchedule();
    }
    
    function deleteFeedingSchedule(scheduleId) {
      if (confirm('Are you sure you want to delete this feeding schedule?')) {
        feedingSchedules = feedingSchedules.filter(s => s.id !== scheduleId);
        saveData();
        renderFeedingSchedule();
      }
    }
    // --- REMINDERS ---
    function addReminder(type, time, date, notes, repeat, customText = '') {
      const reminder = {
        id: Date.now().toString(),
        type: type,
        time: time,
        date: date,
        notes: notes,
        repeat: repeat,
        customText: customText,
        completed: false,
        timestamp: new Date().toISOString()
      };
      
      reminders.push(reminder);
      saveData();
      renderReminders();
    }
    
    function renderReminders() {
      const container = $('#reminders-list');
      if (!container) return;
      
      const today = new Date().toISOString().split('T')[0];
      const activeReminders = reminders.filter(reminder => !reminder.completed && reminder.date >= today);
      
      if (activeReminders.length === 0) {
        container.innerHTML = '<p class="text-secondary text-center py-4">No reminders set.</p>';
        return;
      }
      
      // Sort by date and time
      activeReminders.sort((a, b) => {
        if (a.date !== b.date) return a.date.localeCompare(b.date);
        return a.time.localeCompare(b.time);
      });
      
      container.innerHTML = activeReminders.map(reminder => {
        const typeNames = {
          'feed': 'Feeding',
          'diaper': 'Diaper Change',
          'sleep': 'Sleep/Nap',
          'medicine': 'Medicine',
          'appointment': 'Appointment',
          'custom': reminder.customText || 'Custom'
        };
        
        const typeIcons = {
          'feed': 'fas fa-utensils text-blue-500',
          'diaper': 'fas fa-baby text-amber-500',
          'sleep': 'fas fa-moon text-indigo-500',
          'medicine': 'fas fa-pills text-cyan-500',
          'appointment': 'fas fa-calendar text-purple-500',
          'custom': 'fas fa-bell text-orange-500'
        };
        
        const isToday = reminder.date === today;
        const dateDisplay = isToday ? 'Today' : new Date(reminder.date).toLocaleDateString();
        
        return `
          <div class="flex items-center justify-between p-3 bg-white/50 dark:bg-slate-800/50 rounded-lg">
            <div class="flex items-center">
              <i class="${typeIcons[reminder.type]} text-xl mr-3"></i>
              <div>
                <div class="font-semibold text-primary">${typeNames[reminder.type]}</div>
                <div class="text-sm text-secondary">${dateDisplay} at ${reminder.time}${reminder.notes ? ` - ${reminder.notes}` : ''}</div>
              </div>
            </div>
            <div class="flex items-center space-x-2">
              <button onclick="markReminderComplete('${reminder.id}')" class="text-green-500 hover:text-green-700 transition-colors" title="Mark as complete">
                <i class="fas fa-check"></i>
              </button>
              <button onclick="deleteReminder('${reminder.id}')" class="text-red-500 hover:text-red-700 transition-colors" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
      }).join('');
    }
    
    function markReminderComplete(reminderId) {
      const reminder = reminders.find(r => r.id === reminderId);
      if (!reminder) return;
      
      reminder.completed = true;
      saveData();
      renderReminders();
    }
    
    function deleteReminder(reminderId) {
      if (confirm('Are you sure you want to delete this reminder?')) {
        reminders = reminders.filter(r => r.id !== reminderId);
        saveData();
        renderReminders();
      }
    }
    // --- APPOINTMENTS ---
    function addAppointment(date, time, doctorName, type, location, reason, notes, reminder, status) {
      const appointment = {
        id: Date.now().toString(),
        date: date,
        time: time,
        doctorName: doctorName,
        type: type,
        location: location,
        reason: reason,
        notes: notes,
        reminder: reminder,
        status: status,
        visitSummary: null,
        timestamp: new Date().toISOString()
      };
      
      appointments.push(appointment);
      saveData();
      renderAppointments();
      updateAppointmentStats();
      
      // Add to activity log if completed
      if (status === 'completed') {
        addEntry('appointment', `${date}T${time}`, `Doctor: ${doctorName} - ${type}`, null);
      }
    }
    
    function renderAppointments() {
      const container = $('#appointments-list');
      if (!container) return;
      
      const today = new Date().toISOString().split('T')[0];
      const upcomingAppointments = appointments
        .filter(appointment => appointment.date >= today && appointment.status !== 'cancelled')
        .sort((a, b) => {
          if (a.date !== b.date) return a.date.localeCompare(b.date);
          return a.time.localeCompare(b.time);
        });
      
      if (upcomingAppointments.length === 0) {
        container.innerHTML = '<p class="text-secondary text-center py-4">No appointments scheduled.</p>';
        return;
      }
      
      container.innerHTML = upcomingAppointments.map(appointment => {
        const typeNames = {
          'pediatrician': 'Pediatrician',
          'family-medicine': 'Family Medicine',
          'vaccination': 'Vaccination',
          'wellness-check': 'Wellness Check',
          'sick-visit': 'Sick Visit',
          'follow-up': 'Follow-up',
          'specialist': 'Specialist',
          'emergency': 'Emergency',
          'other': 'Other'
        };
        
        const typeIcons = {
          'pediatrician': 'fas fa-user-md text-blue-500',
          'family-medicine': 'fas fa-stethoscope text-green-500',
          'vaccination': 'fas fa-syringe text-purple-500',
          'wellness-check': 'fas fa-heartbeat text-pink-500',
          'sick-visit': 'fas fa-thermometer text-red-500',
          'follow-up': 'fas fa-arrow-right text-indigo-500',
          'specialist': 'fas fa-user-md text-orange-500',
          'emergency': 'fas fa-ambulance text-red-600',
          'other': 'fas fa-hospital text-gray-500'
        };
        
        const statusColors = {
          'scheduled': 'bg-yellow-100 text-yellow-800',
          'confirmed': 'bg-blue-100 text-blue-800',
          'completed': 'bg-green-100 text-green-800',
          'cancelled': 'bg-red-100 text-red-800'
        };
        
        const isToday = appointment.date === today;
        const dateDisplay = isToday ? 'Today' : new Date(appointment.date).toLocaleDateString();
        
        return `
          <div class="flex items-center justify-between p-4 bg-white/50 dark:bg-slate-800/50 rounded-lg">
            <div class="flex items-center flex-1">
              <i class="${typeIcons[appointment.type]} text-xl mr-3"></i>
              <div class="flex-1">
                <div class="flex items-center space-x-2">
                  <div class="font-semibold text-primary">${typeNames[appointment.type]}</div>
                  <span class="px-2 py-1 rounded-full text-xs font-medium ${statusColors[appointment.status]}">${appointment.status}</span>
                </div>
                <div class="text-sm text-secondary">${dateDisplay} at ${appointment.time}</div>
                <div class="text-sm text-secondary">Dr. ${appointment.doctorName} - ${appointment.location}</div>
                <div class="text-sm text-secondary mt-1">${appointment.reason}</div>
              </div>
            </div>
            <div class="flex items-center space-x-2 ml-4">
              <button onclick="viewAppointmentDetails('${appointment.id}')" class="text-blue-500 hover:text-blue-700 transition-colors" title="View details">
                <i class="fas fa-eye"></i>
              </button>
              <button onclick="editAppointment('${appointment.id}')" class="text-green-500 hover:text-green-700 transition-colors" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
              <button onclick="deleteAppointment('${appointment.id}')" class="text-red-500 hover:text-red-700 transition-colors" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
      }).join('');
    }
    
    function updateAppointmentStats() {
      const today = new Date();
      const currentMonth = today.getMonth();
      const currentYear = today.getFullYear();
      
      // Filter appointments for current month
      const monthAppointments = appointments.filter(appointment => {
        const appointmentDate = new Date(appointment.date);
        return appointmentDate.getMonth() === currentMonth && 
               appointmentDate.getFullYear() === currentYear;
      });
      
      const upcoming = monthAppointments.filter(a => a.date >= today.toISOString().split('T')[0] && a.status !== 'cancelled').length;
      const completed = monthAppointments.filter(a => a.status === 'completed').length;
      
      document.getElementById('stats-upcoming').textContent = upcoming;
      document.getElementById('stats-completed').textContent = completed;
      
      // Find next visit
      const nextVisit = appointments
        .filter(a => a.date >= today.toISOString().split('T')[0] && a.status !== 'cancelled')
        .sort((a, b) => a.date.localeCompare(b.date))[0];
      
      if (nextVisit) {
        const nextDate = new Date(nextVisit.date);
        const daysUntil = Math.ceil((nextDate - today) / (1000 * 60 * 60 * 24));
        document.getElementById('stats-next-visit').textContent = daysUntil === 0 ? 'Today' : `${daysUntil} days`;
      } else {
        document.getElementById('stats-next-visit').textContent = '-';
      }
      
      // Recent visits
      const recentVisits = appointments
        .filter(a => a.status === 'completed')
        .sort((a, b) => b.date.localeCompare(a.date))
        .slice(0, 3);
      
      const recentVisitsContainer = $('#recent-visits');
      if (recentVisits.length === 0) {
        recentVisitsContainer.innerHTML = '<p class="text-secondary text-center">No recent visits</p>';
      } else {
        recentVisitsContainer.innerHTML = recentVisits.map(visit => {
          const visitDate = new Date(visit.date);
          const daysAgo = Math.ceil((today - visitDate) / (1000 * 60 * 60 * 24));
          return `
            <div class="flex justify-between text-sm">
              <span>${visit.doctorName}</span>
              <span class="font-medium">${daysAgo}d ago</span>
            </div>
          `;
        }).join('');
      }
    }
    
    function viewAppointmentDetails(appointmentId) {
      const appointment = appointments.find(a => a.id === appointmentId);
      if (!appointment) return;
      
      const typeNames = {
        'pediatrician': 'Pediatrician',
        'family-medicine': 'Family Medicine',
        'vaccination': 'Vaccination',
        'wellness-check': 'Wellness Check',
        'sick-visit': 'Sick Visit',
        'follow-up': 'Follow-up',
        'specialist': 'Specialist',
        'emergency': 'Emergency',
        'other': 'Other'
      };
      
      const statusColors = {
        'scheduled': 'bg-yellow-100 text-yellow-800',
        'confirmed': 'bg-blue-100 text-blue-800',
        'completed': 'bg-green-100 text-green-800',
        'cancelled': 'bg-red-100 text-red-800'
      };
      
      // Populate appointment details
      const detailsContent = $('#appointment-details-content');
      detailsContent.innerHTML = `
        <div class="bg-white/50 dark:bg-slate-800/50 rounded-lg p-4 space-y-3">
          <div class="flex items-center justify-between">
            <h4 class="font-semibold text-primary">${typeNames[appointment.type]}</h4>
            <span class="px-2 py-1 rounded-full text-xs font-medium ${statusColors[appointment.status]}">${appointment.status}</span>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
            <div><span class="font-medium">Date:</span> ${new Date(appointment.date).toLocaleDateString()}</div>
            <div><span class="font-medium">Time:</span> ${appointment.time}</div>
            <div><span class="font-medium">Doctor:</span> ${appointment.doctorName}</div>
            <div><span class="font-medium">Location:</span> ${appointment.location}</div>
          </div>
          <div><span class="font-medium">Reason:</span> ${appointment.reason}</div>
          ${appointment.notes ? `<div><span class="font-medium">Notes:</span> ${appointment.notes}</div>` : ''}
          ${appointment.reminder !== 'none' ? `<div><span class="font-medium">Reminder:</span> ${appointment.reminder}</div>` : ''}
        </div>
      `;
      
      // Populate visit summary if exists
      if (appointment.visitSummary) {
        const summaryContent = $('#visit-summary-content');
        summaryContent.innerHTML = `
          <div class="bg-white/50 dark:bg-slate-800/50 rounded-lg p-4">
            <h4 class="font-semibold text-primary mb-3">Visit Summary</h4>
            <div class="space-y-3 text-sm">
              ${appointment.visitSummary.diagnosis ? `<div><span class="font-medium">Diagnosis:</span> ${appointment.visitSummary.diagnosis}</div>` : ''}
              ${appointment.visitSummary.treatment ? `<div><span class="font-medium">Treatment:</span> ${appointment.visitSummary.treatment}</div>` : ''}
              ${appointment.visitSummary.medications ? `<div><span class="font-medium">Medications:</span> ${appointment.visitSummary.medications}</div>` : ''}
              ${appointment.visitSummary.followup ? `<div><span class="font-medium">Follow-up:</span> ${appointment.visitSummary.followup}</div>` : ''}
              ${appointment.visitSummary.notes ? `<div><span class="font-medium">Notes:</span> ${appointment.visitSummary.notes}</div>` : ''}
            </div>
          </div>
        `;
      } else {
        // Show form for adding summary
        const summaryContent = $('#visit-summary-content');
        summaryContent.innerHTML = `
          <div class="bg-white/50 dark:bg-slate-800/50 rounded-lg p-4">
            <h4 class="font-semibold text-primary mb-3">Add Visit Summary</h4>
            <form id="visit-summary-form" class="space-y-3">
              <input type="hidden" id="summary-appointment-id" value="${appointment.id}">
              <div>
                <label class="block text-sm font-medium text-secondary mb-1">Diagnosis/Findings</label>
                <textarea id="visit-diagnosis" class="input-enhanced w-full h-20 resize-none" placeholder="What did the doctor find?"></textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-secondary mb-1">Treatment/Recommendations</label>
                <textarea id="visit-treatment" class="input-enhanced w-full h-20 resize-none" placeholder="What treatment was prescribed?"></textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-secondary mb-1">Medications</label>
                <textarea id="visit-medications" class="input-enhanced w-full h-20 resize-none" placeholder="Any medications prescribed?"></textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-secondary mb-1">Follow-up</label>
                <textarea id="visit-followup" class="input-enhanced w-full h-20 resize-none" placeholder="When to follow up?"></textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-secondary mb-1">Notes</label>
                <textarea id="visit-notes" class="input-enhanced w-full h-20 resize-none" placeholder="Additional notes..."></textarea>
              </div>
              <div class="flex space-x-3">
                <button type="submit" class="flex-1 bg-green-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-600 transition-colors">
                  Save Summary
                </button>
                <button type="button" onclick="markAppointmentComplete()" class="flex-1 bg-blue-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors">
                  Mark Complete
                </button>
              </div>
            </form>
          </div>
        `;
      }
      
      document.getElementById('summary-appointment-id').value = appointmentId;
      showModal('appointment-details-modal');
    }
    
    function markAppointmentComplete() {
      const appointmentId = document.getElementById('summary-appointment-id').value;
      const appointment = appointments.find(a => a.id === appointmentId);
      if (!appointment) return;
      
      appointment.status = 'completed';
      saveData();
      renderAppointments();
      updateAppointmentStats();
      hideModal('appointment-details-modal');
      
      // Add to activity log
      addEntry('appointment', `${appointment.date}T${appointment.time}`, `Doctor: ${appointment.doctorName} - ${appointment.type}`, null);
    }
    
    function deleteAppointment(appointmentId) {
      if (confirm('Are you sure you want to delete this appointment?')) {
        appointments = appointments.filter(a => a.id !== appointmentId);
        saveData();
        renderAppointments();
        updateAppointmentStats();
      }
    }
    // --- APP RESET FUNCTIONALITY ---
    function confirmResetApp() {
      const confirmation = document.getElementById('reset-confirmation').value.trim();
      if (confirmation !== 'RESET') {
        alert('Please type "RESET" exactly to confirm the deletion.');
        return;
      }
      
      if (confirm('FINAL WARNING: This will permanently delete ALL data and cannot be undone. Are you absolutely sure?')) {
        resetApp();
      }
    }
    
    function resetApp() {
      try {
        // Clear all localStorage data
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && (key.startsWith('activityLog_') || 
                      key.startsWith('moodAnalytics_') || 
                      key.startsWith('customActivities_') || 
                      key.startsWith('milestones_') || 
                      key.startsWith('growthData_') || 
                      key.startsWith('feedingSchedules_') || 
                      key.startsWith('reminders_') || 
                      key.startsWith('appointments_') || 
                      key.startsWith('inventory_') ||
                      key === 'babyProfiles' ||
                      key === 'currentProfileId' ||
                      key === 'darkMode')) {
            keysToRemove.push(key);
          }
        }
        
        keysToRemove.forEach(key => localStorage.removeItem(key));
        
        // Reset all global state
        babyProfiles = [];
        currentProfileId = null;
        activityLog = [];
        moodAnalytics = { total: 0, moods: {} };
        customActivities = [];
        milestones = [];
        growthData = [];
        feedingSchedules = [];
        reminders = [];
        appointments = [];
        inventory = { diapers: 0, wipes: 0, formula: 0, medicine: 0 };
        
        // Reset timer state
        if (timerState.interval) {
          clearInterval(timerState.interval);
        }
        timerState = {
          isRunning: false,
          startTime: null,
          currentActivity: null,
          interval: null,
          elapsed: 0
        };
        
        // Hide all modals
        hideModal('reset-app-modal');
        hideModal('profile-modal');
        
        // Show success message
        showResetSuccessMessage();
        
        // Redirect to welcome screen after a short delay
        setTimeout(() => {
          showModal('welcome-modal');
        }, 2000);
        
      } catch (error) {
        console.error('Error during app reset:', error);
        alert('An error occurred during the reset. Please try again.');
      }
    }
    
    function showResetSuccessMessage() {
      // Create a success notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 animate-bounce';
      notification.innerHTML = `
        <div class="flex items-center space-x-3">
          <i class="fas fa-check-circle text-2xl"></i>
          <div>
            <div class="font-bold">App Reset Complete!</div>
            <div class="text-sm">All data has been deleted. Starting fresh...</div>
          </div>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Remove notification after 3 seconds
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 3000);
    }
    
    // Setup reset confirmation input handler
    function setupResetConfirmation() {
      const resetInput = document.getElementById('reset-confirmation');
      const resetBtn = document.getElementById('reset-confirm-btn');
      
      if (resetInput && resetBtn) {
        resetInput.addEventListener('input', function() {
          const confirmation = this.value.trim();
          if (confirmation === 'RESET') {
            resetBtn.disabled = false;
            resetBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          } else {
            resetBtn.disabled = true;
            resetBtn.classList.add('opacity-50', 'cursor-not-allowed');
          }
        });
        
        // Clear input when modal is shown
        resetInput.addEventListener('focus', function() {
          this.value = '';
          resetBtn.disabled = true;
          resetBtn.classList.add('opacity-50', 'cursor-not-allowed');
        });
      }
    }
    
    function showGrowthChart(chartType) {
      const chartContainer = $('#growth-chart');
      if (!chartContainer) return;
      
      // Filter data by type
      const typeMap = {
        'weight': 'weight',
        'height': 'height',
        'head': 'head-circumference'
      };
      
      const targetType = typeMap[chartType];
      const filteredData = growthData.filter(m => m.type === targetType);
      
      if (filteredData.length === 0) {
        chartContainer.innerHTML = `
          <div class="text-center py-8">
            <i class="fas fa-chart-line text-4xl text-gray-400 mb-4"></i>
            <p class="text-secondary">No ${chartType} data available</p>
            <p class="text-sm text-secondary mt-2">Add some measurements to see your growth chart!</p>
          </div>
        `;
        return;
      }
      
      // Sort by date
      filteredData.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // Create simple bar chart using CSS
      const chartHtml = createSimpleChart(filteredData, chartType);
      chartContainer.innerHTML = chartHtml;
    }
    
    function createSimpleChart(data, chartType) {
      if (data.length === 0) return '<p class="text-secondary">No data available</p>';
      
      const maxValue = Math.max(...data.map(d => d.value));
      const minValue = Math.min(...data.map(d => d.value));
      const valueRange = maxValue - minValue;
      
      let html = `
        <div class="space-y-4">
          <h4 class="font-semibold text-center capitalize">${chartType} Growth Chart</h4>
          <div class="flex items-end justify-center space-x-2 h-48">
      `;
      
      data.forEach((measurement, index) => {
        const height = valueRange > 0 ? ((measurement.value - minValue) / valueRange) * 100 : 50;
        const date = new Date(measurement.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        
        // Format display value
        let displayValue = measurement.value;
        if (measurement.unit === 'ft-in') {
          const totalInches = measurement.value;
          const feet = Math.floor(totalInches / 12);
          const inches = Math.round(totalInches % 12);
          displayValue = `${feet}-${inches}`;
        } else if (measurement.unit === 'm-cm') {
          const totalCm = measurement.value;
          const meters = Math.floor(totalCm / 100);
          const centimeters = Math.round(totalCm % 100);
          displayValue = `${meters}-${centimeters}`;
        } else {
          displayValue = Math.round(measurement.value * 10) / 10;
        }
        
        html += `
          <div class="flex flex-col items-center">
            <div class="bg-blue-500 hover:bg-blue-600 transition-colors rounded-t w-8 relative group" 
                 style="height: ${Math.max(height, 10)}%">
              <div class="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                ${displayValue} ${measurement.unit}
              </div>
            </div>
            <div class="text-xs text-secondary mt-2 text-center">${date}</div>
          </div>
        `;
      });
      
      html += `
          </div>
          <div class="text-center text-sm text-secondary">
            <div class="flex justify-between items-center">
              <span>${minValue} ${data[0]?.unit || ''}</span>
              <span>${maxValue} ${data[0]?.unit || ''}</span>
            </div>
          </div>
        </div>
      `;
      
      return html;
    }
    // ... existing code ...
    function updateHeaderStats() {
      const statsBar = document.getElementById('header-stats-bar');
      if (!statsBar) return;

      // Get latest measurements
      const latestWeight = [...growthData].filter(m => m.type === 'weight').sort((a, b) => new Date(b.date) - new Date(a.date))[0];
      const latestHeight = [...growthData].filter(m => m.type === 'height').sort((a, b) => new Date(b.date) - new Date(a.date))[0];
      const latestHead = [...growthData].filter(m => m.type === 'head-circumference').sort((a, b) => new Date(b.date) - new Date(a.date))[0];

      // Get profile and age
      const profile = babyProfiles.find(p => p.id == currentProfileId);
      const age = profile ? calculatePreciseAge(profile.dob) : '-';

      // Format helpers
      function formatValue(measurement) {
        if (!measurement) return '-';
        let v = measurement.value;
        if (measurement.unit === 'ft-in') {
          const feet = Math.floor(v / 12);
          const inches = Math.round(v % 12);
          return `${feet} ft ${inches} in`;
        } else if (measurement.unit === 'm-cm') {
          const meters = Math.floor(v / 100);
          const centimeters = Math.round(v % 100);
          return `${meters} m ${centimeters} cm`;
        } else {
          return `${Math.round(v * 10) / 10} ${measurement.unit}`;
        }
      }

      statsBar.innerHTML = `
        <div class="flex flex-col items-center">
          <div class="text-xs text-secondary">Age</div>
          <div class="font-bold text-lg flex items-center gap-1"><i class="fas fa-baby text-pink-400"></i> ${age}</div>
        </div>
        <div class="flex flex-col items-center">
          <div class="text-xs text-secondary">Current Weight</div>
          <div class="font-bold text-lg flex items-center gap-1"><i class="fas fa-weight-scale text-red-400"></i> ${formatValue(latestWeight)}</div>
        </div>
        <div class="flex flex-col items-center">
          <div class="text-xs text-secondary">Current Height</div>
          <div class="font-bold text-lg flex items-center gap-1"><i class="fas fa-ruler-vertical text-green-400"></i> ${formatValue(latestHeight)}</div>
        </div>
        <div class="flex flex-col items-center">
          <div class="text-xs text-secondary">Head Circumference</div>
          <div class="font-bold text-lg flex items-center gap-1"><i class="fas fa-circle text-purple-400"></i> ${formatValue(latestHead)}</div>
        </div>
      `;
    }
    // ... existing code ...
    
    // --- FEED QUANTITY TOGGLE ---
    function toggleFeedQuantityField() {
      const activityType = document.getElementById('activity-type').value;
      const quantitySection = document.getElementById('feed-quantity-section');
      const moodSection = document.getElementById('mood-section');
      const inventorySection = document.getElementById('inventory-status-section');
      
      // Show/hide quantity field for feed activities
      if (activityType === 'feed') {
        quantitySection.classList.remove('hidden');
        // Reset feed type and quantity fields
        document.getElementById('feed-type').value = '';
        document.getElementById('feed-quantity').value = '';
      } else {
        quantitySection.classList.add('hidden');
      }
      
      // Show/hide mood field for mood activities
      if (activityType === 'mood') {
        moodSection.classList.remove('hidden');
      } else {
        moodSection.classList.add('hidden');
      }
      
      // Show/hide and update inventory status for activities that use inventory
      if (activityType === 'diaper' || activityType === 'feed' || activityType === 'medication') {
        inventorySection.classList.remove('hidden');
        updateInventoryImpact(activityType);
      } else {
        inventorySection.classList.add('hidden');
      }
    }
    
    function updateFeedInventoryImpact() {
      const feedType = document.getElementById('feed-type')?.value;
      const quantity = document.getElementById('feed-quantity')?.value;
      const impactItems = document.getElementById('inventory-impact-items');
      
      if (!impactItems || feedType !== 'formula') {
        return;
      }
      
      let items = [];
      
      if (feedType === 'formula' && quantity && parseFloat(quantity) > 0) {
        const bottlesNeeded = Math.ceil(parseFloat(quantity) / 4);
        items.push({
          item: 'Formula',
          amount: `${bottlesNeeded} bottle${bottlesNeeded > 1 ? 's' : ''} (${quantity} oz)`,
          available: inventory.formula,
          icon: 'fas fa-baby-carriage',
          color: 'purple-500'
        });
      } else {
        items.push({
          item: 'Formula',
          amount: 'Based on quantity',
          available: inventory.formula,
          icon: 'fas fa-baby-carriage',
          color: 'purple-500'
        });
      }
      
      impactItems.innerHTML = items.map(item => `
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-2">
            <i class="${item.icon} text-${item.color}"></i>
            <span>${item.item}: ${item.amount}</span>
          </div>
          <div class="text-right">
            <span class="font-medium">${item.available} available</span>
            ${item.available === 0 ? '<span class="text-red-500 ml-1">⚠️</span>' : ''}
          </div>
        </div>
      `).join('');
    }
    
    function updateInventoryImpact(activityType) {
      const impactItems = document.getElementById('inventory-impact-items');
      if (!impactItems) return;
      
      let items = [];
      
      switch (activityType) {
        case 'diaper':
          items.push({
            item: 'Diapers',
            amount: '1',
            available: inventory.diapers,
            icon: 'fas fa-baby',
            color: 'amber-500'
          });
          items.push({
            item: 'Wipes',
            amount: '2',
            available: inventory.wipes,
            icon: 'fas fa-wind',
            color: 'blue-500'
          });
          break;
          
        case 'feed':
          // This will be updated when feed type and quantity are selected
          items.push({
            item: 'Formula',
            amount: 'Based on quantity',
            available: inventory.formula,
            icon: 'fas fa-baby-carriage',
            color: 'purple-500'
          });
          break;
          
        case 'medication':
          items.push({
            item: 'Medicine',
            amount: '1 dose',
            available: inventory.medicine,
            icon: 'fas fa-pills',
            color: 'cyan-500'
          });
          break;
      }
      
      impactItems.innerHTML = items.map(item => `
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-2">
            <i class="${item.icon} text-${item.color}"></i>
            <span>${item.item}: ${item.amount}</span>
          </div>
          <div class="text-right">
            <span class="font-medium">${item.available} available</span>
            ${item.available === 0 ? '<span class="text-red-500 ml-1">⚠️</span>' : ''}
          </div>
        </div>
      `).join('');
    }
    
    function updateEditInventoryImpact(activityType, quantity = null, feedType = null) {
      const impactItems = document.getElementById('edit-inventory-impact-items');
      if (!impactItems) return;
      
      let items = [];
      
      switch (activityType) {
        case 'diaper':
          items.push({
            item: 'Diapers',
            amount: '1',
            available: inventory.diapers,
            icon: 'fas fa-baby',
            color: 'amber-500'
          });
          items.push({
            item: 'Wipes',
            amount: '2',
            available: inventory.wipes,
            icon: 'fas fa-wind',
            color: 'blue-500'
          });
          break;
          
        case 'feed':
          if (feedType === 'formula' && quantity && quantity > 0) {
            const bottlesNeeded = Math.ceil(quantity / 4);
            items.push({
              item: 'Formula',
              amount: `${bottlesNeeded} bottle${bottlesNeeded > 1 ? 's' : ''} (${quantity} oz)`,
              available: inventory.formula,
              icon: 'fas fa-baby-carriage',
              color: 'purple-500'
            });
          } else {
            items.push({
              item: 'Formula',
              amount: 'Based on quantity',
              available: inventory.formula,
              icon: 'fas fa-baby-carriage',
              color: 'purple-500'
            });
          }
          break;
          
        case 'medication':
          items.push({
            item: 'Medicine',
            amount: '1 dose',
            available: inventory.medicine,
            icon: 'fas fa-pills',
            color: 'cyan-500'
          });
          break;
      }
      
      impactItems.innerHTML = items.map(item => `
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-2">
            <i class="${item.icon} text-${item.color}"></i>
            <span>${item.item}: ${item.amount}</span>
          </div>
          <div class="text-right">
            <span class="font-medium">${item.available} available</span>
            ${item.available === 0 ? '<span class="text-red-500 ml-1">⚠️</span>' : ''}
          </div>
        </div>
      `).join('');
    }
    
    function toggleEditFeedQuantityField() {
      const activityType = document.getElementById('edit-activity-type').value;
      const quantitySection = document.getElementById('edit-feed-quantity-section');
      const moodSection = document.getElementById('edit-mood-section');
      const inventorySection = document.getElementById('edit-inventory-status-section');
      
      // Show/hide quantity field for feed activities
      if (activityType === 'feed') {
        quantitySection.classList.remove('hidden');
        // Reset feed type and quantity fields
        document.getElementById('edit-feed-type').value = '';
        document.getElementById('edit-feed-quantity').value = '';
      } else {
        quantitySection.classList.add('hidden');
      }
      
      // Show/hide mood field for mood activities
      if (activityType === 'mood') {
        moodSection.classList.remove('hidden');
      } else {
        moodSection.classList.add('hidden');
      }
      
      // Show/hide and update inventory status for activities that use inventory
      if (activityType === 'diaper' || activityType === 'feed' || activityType === 'medication') {
        inventorySection.classList.remove('hidden');
        updateEditInventoryImpact(activityType);
      } else {
        inventorySection.classList.add('hidden');
      }
    }

    // ... existing code ...
    function renderLogModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer) return;
      if (document.getElementById('log-modal')) return; // Prevent duplicate
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="log-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('log-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Log Activity</h2>
            <form id="activity-form">
              <div class="mb-4">
                <label for="activity-type" class="block mb-1 font-medium">Activity Type</label>
                <select id="activity-type" class="input-enhanced w-full"></select>
              </div>
              <div class="mb-4">
                <label for="activity-time" class="block mb-1 font-medium">Time</label>
                <input id="activity-time" type="datetime-local" class="input-enhanced w-full" />
              </div>
              <div class="mb-4" id="feed-quantity-section" style="display:none;">
                <label for="feed-type" class="block mb-1 font-medium">Feed Type</label>
                <select id="feed-type" class="input-enhanced w-full mb-2">
                  <option value="">Select type...</option>
                  <option value="breast">Breast</option>
                  <option value="formula">Formula</option>
                </select>
                <label for="feed-quantity" class="block mb-1 font-medium">Quantity (oz)</label>
                <input id="feed-quantity" type="number" min="0" step="0.5" class="input-enhanced w-full" />
              </div>
              <div class="mb-4" id="mood-section" style="display:none;">
                <label class="block mb-1 font-medium">Mood</label>
                <div class="flex space-x-2">
                  <button type="button" class="mood-btn input-enhanced" data-mood="😢">😢</button>
                  <button type="button" class="mood-btn input-enhanced" data-mood="😐">😐</button>
                  <button type="button" class="mood-btn input-enhanced" data-mood="🙂">🙂</button>
                  <button type="button" class="mood-btn input-enhanced" data-mood="😊">😊</button>
                  <button type="button" class="mood-btn input-enhanced" data-mood="😄">😄</button>
                </div>
              </div>
              <div class="mb-4">
                <label for="activity-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="activity-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Log Activity</button>
              </div>
            </form>
          </div>
        </div>
      `);
      // Setup form logic and show/hide logic for sections
      const form = document.getElementById('activity-form');
      const feedSection = document.getElementById('feed-quantity-section');
      const moodSection = document.getElementById('mood-section');
      const activityTypeSelect = document.getElementById('activity-type');
      if (activityTypeSelect) {
        const allActivities = [...defaultActivities, ...customActivities];
        activityTypeSelect.innerHTML = '<option value="">Select activity...</option>' +
          allActivities.map(act => `<option value="${act.id}">${act.name}</option>`).join('');
        activityTypeSelect.addEventListener('change', function() {
          if (this.value === 'feed') {
            feedSection.style.display = '';
          } else {
            feedSection.style.display = 'none';
          }
          if (this.value === 'mood') {
            moodSection.style.display = '';
          } else {
            moodSection.style.display = 'none';
          }
        });
      }
      // Mood button selection
      document.querySelectorAll('.mood-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.mood-btn').forEach(b => b.classList.remove('selected', 'scale-125'));
          this.classList.add('selected', 'scale-125');
        });
      });
      // Form submit
      if (form) {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          const activityType = document.getElementById('activity-type').value;
          const activityTime = document.getElementById('activity-time').value;
          const activityNotes = document.getElementById('activity-notes').value;
          let selectedMood = null;
          const selectedMoodBtn = document.querySelector('.mood-btn.selected');
          if (selectedMoodBtn) selectedMood = selectedMoodBtn.getAttribute('data-mood');
          let quantity = null, feedType = null;
          if (activityType === 'feed') {
            feedType = document.getElementById('feed-type').value;
            quantity = parseFloat(document.getElementById('feed-quantity').value) || null;
          }
          addEntry(activityType, activityTime, activityNotes, selectedMood, quantity, feedType);
          hideModal('log-modal');
          form.reset();
          feedSection.style.display = 'none';
          moodSection.style.display = 'none';
        });
      }
    }
    // ... existing code ...
    // Call renderLogModal during initialization
    const originalInitializeApp = initializeApp;
    initializeApp = function() {
      renderLogModal();
      originalInitializeApp();
    };
    // ... existing code ...

    // ... existing code ...
    function renderMilestoneModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('milestone-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="milestone-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('milestone-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Add Milestone</h2>
            <form id="milestone-form">
              <div class="mb-4">
                <label for="milestone-type" class="block mb-1 font-medium">Milestone Type</label>
                <select id="milestone-type" class="input-enhanced w-full">
                  <option value="first-smile">First Smile</option>
                  <option value="first-roll">First Roll</option>
                  <option value="first-sit">First Sit</option>
                  <option value="first-crawl">First Crawl</option>
                  <option value="first-step">First Step</option>
                  <option value="first-word">First Word</option>
                  <option value="first-tooth">First Tooth</option>
                  <option value="custom">Custom</option>
                </select>
              </div>
              <div class="mb-4 hidden" id="custom-milestone-input">
                <label for="custom-milestone-text" class="block mb-1 font-medium">Custom Milestone</label>
                <input id="custom-milestone-text" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="milestone-date" class="block mb-1 font-medium">Date</label>
                <input id="milestone-date" type="date" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="milestone-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="milestone-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition-colors">Add Milestone</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderInventoryModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('inventory-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="inventory-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('inventory-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Inventory Action</h2>
            <form id="inventory-form">
              <div class="mb-4">
                <label for="inventory-item-type" class="block mb-1 font-medium">Item</label>
                <select id="inventory-item-type" class="input-enhanced w-full">
                  <option value="diapers">Diapers</option>
                  <option value="wipes">Wipes</option>
                  <option value="formula">Formula</option>
                  <option value="medicine">Medicine</option>
                </select>
              </div>
              <div class="mb-4">
                <label for="inventory-quantity" class="block mb-1 font-medium">Quantity</label>
                <input id="inventory-quantity" type="number" min="0" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="inventory-action" class="block mb-1 font-medium">Action</label>
                <select id="inventory-action" class="input-enhanced w-full">
                  <option value="add">Add</option>
                  <option value="remove">Remove</option>
                </select>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors">Update Inventory</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderReminderModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('reminder-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="reminder-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('reminder-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Add Reminder</h2>
            <form id="add-reminder-form">
              <div class="mb-4">
                <label for="reminder-type" class="block mb-1 font-medium">Type</label>
                <select id="reminder-type" class="input-enhanced w-full">
                  <option value="feeding">Feeding</option>
                  <option value="medication">Medication</option>
                  <option value="custom">Custom</option>
                </select>
              </div>
              <div class="mb-4 hidden" id="custom-reminder-input">
                <label for="custom-reminder-text" class="block mb-1 font-medium">Custom Reminder</label>
                <input id="custom-reminder-text" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="reminder-date" class="block mb-1 font-medium">Date</label>
                <input id="reminder-date" type="date" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="reminder-time" class="block mb-1 font-medium">Time</label>
                <input id="reminder-time" type="time" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="reminder-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="reminder-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="mb-4">
                <label for="reminder-repeat" class="block mb-1 font-medium">Repeat</label>
                <select id="reminder-repeat" class="input-enhanced w-full">
                  <option value="none">None</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                </select>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors">Add Reminder</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderAppointmentModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('appointment-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="appointment-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('appointment-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Add Appointment</h2>
            <form id="add-appointment-form">
              <div class="mb-4">
                <label for="appointment-date" class="block mb-1 font-medium">Date</label>
                <input id="appointment-date" type="date" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-time" class="block mb-1 font-medium">Time</label>
                <input id="appointment-time" type="time" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="doctor-name" class="block mb-1 font-medium">Doctor Name</label>
                <input id="doctor-name" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-type" class="block mb-1 font-medium">Type</label>
                <input id="appointment-type" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-location" class="block mb-1 font-medium">Location</label>
                <input id="appointment-location" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-reason" class="block mb-1 font-medium">Reason</label>
                <input id="appointment-reason" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="appointment-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-teal-500 text-white px-4 py-2 rounded-lg hover:bg-teal-600 transition-colors">Add Appointment</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    // ... existing code ...
    const originalInitializeApp = initializeApp;
    initializeApp = function() {
      renderLogModal();
      renderMilestoneModal();
      renderInventoryModal();
      renderReminderModal();
      renderAppointmentModal();
      originalInitializeApp();
    };
    // ... existing code ...

    // ... existing code ...
    function renderTimerSettingsModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('timer-settings-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="timer-settings-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('timer-settings-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Timer Settings</h2>
            <form id="custom-timer-form">
              <div class="mb-4">
                <label for="custom-timer-activity" class="block mb-1 font-medium">Activity</label>
                <select id="custom-timer-activity" class="input-enhanced w-full">
                  <option value="sleep">Sleep</option>
                  <option value="nap">Nap</option>
                  <option value="tummy">Tummy Time</option>
                </select>
              </div>
              <div class="mb-4">
                <label for="custom-timer-duration" class="block mb-1 font-medium">Duration (minutes)</label>
                <input id="custom-timer-duration" type="number" min="1" max="480" class="input-enhanced w-full" />
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors">Start Timer</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderGrowthModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('growth-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="growth-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('growth-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Growth Tracker</h2>
            <form id="growth-form">
              <div class="mb-4">
                <label for="measurement-type" class="block mb-1 font-medium">Type</label>
                <select id="measurement-type" class="input-enhanced w-full">
                  <option value="weight">Weight</option>
                  <option value="height">Height</option>
                </select>
              </div>
              <div class="mb-4">
                <label for="measurement-value" class="block mb-1 font-medium">Value</label>
                <input id="measurement-value" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="measurement-unit" class="block mb-1 font-medium">Unit</label>
                <select id="measurement-unit" class="input-enhanced w-full">
                  <option value="lbs">lbs</option>
                  <option value="kg">kg</option>
                  <option value="in">in</option>
                  <option value="cm">cm</option>
                  <option value="ft-in">ft-in</option>
                  <option value="m-cm">m-cm</option>
                </select>
              </div>
              <div class="mb-4">
                <label for="measurement-date" class="block mb-1 font-medium">Date</label>
                <input id="measurement-date" type="date" class="input-enhanced w-full" />
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Add Measurement</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderScheduleModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('schedule-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="schedule-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('schedule-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Feeding Schedule</h2>
            <div id="schedule-content"></div>
          </div>
        </div>
      `);
    }
    function renderProfileModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('profile-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="profile-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('profile-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Manage Profiles</h2>
            <select id="profile-switcher" class="input-enhanced w-full mb-4"></select>
            <div class="flex justify-between">
              <button onclick="showSetupForNewProfile()" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Add Profile</button>
              <button onclick="deleteCurrentProfile()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">Delete Profile</button>
            </div>
          </div>
        </div>
      `);
    }
    function renderSetupModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('setup-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="setup-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('setup-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 id="setup-title" class="text-xl font-bold mb-2 text-primary">Setup</h2>
            <p id="setup-subtitle" class="mb-4 text-secondary">Enter your info</p>
            <form id="setup-form">
              <div class="mb-4">
                <label for="user-name" class="block mb-1 font-medium">Your Name</label>
                <input id="user-name" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="baby-name" class="block mb-1 font-medium">Baby Name</label>
                <input id="baby-name" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="baby-dob" class="block mb-1 font-medium">Date of Birth</label>
                <input id="baby-dob" type="date" class="input-enhanced w-full" />
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Save</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderWelcomeModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('welcome-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="welcome-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative text-center">
            <h2 class="text-2xl font-bold mb-2 text-primary">Welcome to LittleSprout!</h2>
            <p class="mb-4 text-secondary">Let's get started by setting up your profile.</p>
            <button onclick="hideModal('welcome-modal'); showModal('setup-modal');" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Start Setup</button>
          </div>
        </div>
      `);
    }
    function renderResetAppModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('reset-app-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="reset-app-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative text-center">
            <button onclick="hideModal('reset-app-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-2 text-primary">Reset App</h2>
            <p class="mb-4 text-secondary">Type <b>RESET</b> to confirm. This will erase all data.</p>
            <input id="reset-confirmation" class="input-enhanced w-full mb-4" />
            <button id="reset-confirm-btn" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors opacity-50 cursor-not-allowed" disabled onclick="resetApp()">Reset</button>
          </div>
        </div>
      `);
    }
    function renderActivityEditorModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('activity-editor-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="activity-editor-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('activity-editor-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Edit Activity</h2>
            <form id="activity-editor-form">
              <input id="edit-activity-id" type="hidden" />
              <div class="mb-4">
                <label for="edit-activity-type" class="block mb-1 font-medium">Activity Type</label>
                <select id="edit-activity-type" class="input-enhanced w-full"></select>
              </div>
              <div class="mb-4">
                <label for="edit-activity-time" class="block mb-1 font-medium">Time</label>
                <input id="edit-activity-time" type="datetime-local" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="edit-activity-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="edit-activity-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="mb-4" id="edit-feed-quantity-section" style="display:none;">
                <label for="edit-feed-type" class="block mb-1 font-medium">Feed Type</label>
                <select id="edit-feed-type" class="input-enhanced w-full mb-2">
                  <option value="">Select type...</option>
                  <option value="breast">Breast</option>
                  <option value="formula">Formula</option>
                </select>
                <label for="edit-feed-quantity" class="block mb-1 font-medium">Quantity (oz)</label>
                <input id="edit-feed-quantity" type="number" min="0" step="0.5" class="input-enhanced w-full" />
              </div>
              <div class="mb-4" id="edit-mood-section" style="display:none;">
                <label class="block mb-1 font-medium">Mood</label>
                <div class="flex space-x-2">
                  <button type="button" class="edit-mood-btn input-enhanced" data-mood="😢">😢</button>
                  <button type="button" class="edit-mood-btn input-enhanced" data-mood="😐">😐</button>
                  <button type="button" class="edit-mood-btn input-enhanced" data-mood="🙂">🙂</button>
                  <button type="button" class="edit-mood-btn input-enhanced" data-mood="😊">😊</button>
                  <button type="button" class="edit-mood-btn input-enhanced" data-mood="😄">😄</button>
                </div>
              </div>
              <div class="mb-4" id="edit-inventory-status-section" style="display:none;">
                <label class="block mb-1 font-medium">Inventory Impact</label>
                <div id="edit-inventory-impact-items"></div>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Save Changes</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderAddReminderModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('add-reminder-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="add-reminder-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('add-reminder-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Add Reminder</h2>
            <form id="add-reminder-form">
              <div class="mb-4">
                <label for="reminder-type" class="block mb-1 font-medium">Type</label>
                <select id="reminder-type" class="input-enhanced w-full">
                  <option value="feeding">Feeding</option>
                  <option value="medication">Medication</option>
                  <option value="custom">Custom</option>
                </select>
              </div>
              <div class="mb-4 hidden" id="custom-reminder-input">
                <label for="custom-reminder-text" class="block mb-1 font-medium">Custom Reminder</label>
                <input id="custom-reminder-text" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="reminder-date" class="block mb-1 font-medium">Date</label>
                <input id="reminder-date" type="date" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="reminder-time" class="block mb-1 font-medium">Time</label>
                <input id="reminder-time" type="time" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="reminder-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="reminder-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="mb-4">
                <label for="reminder-repeat" class="block mb-1 font-medium">Repeat</label>
                <select id="reminder-repeat" class="input-enhanced w-full">
                  <option value="none">None</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                </select>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors">Add Reminder</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderAddAppointmentModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('add-appointment-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="add-appointment-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('add-appointment-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Add Appointment</h2>
            <form id="add-appointment-form">
              <div class="mb-4">
                <label for="appointment-date" class="block mb-1 font-medium">Date</label>
                <input id="appointment-date" type="date" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-time" class="block mb-1 font-medium">Time</label>
                <input id="appointment-time" type="time" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="doctor-name" class="block mb-1 font-medium">Doctor Name</label>
                <input id="doctor-name" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-type" class="block mb-1 font-medium">Type</label>
                <input id="appointment-type" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-location" class="block mb-1 font-medium">Location</label>
                <input id="appointment-location" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-reason" class="block mb-1 font-medium">Reason</label>
                <input id="appointment-reason" class="input-enhanced w-full" />
              </div>
              <div class="mb-4">
                <label for="appointment-notes" class="block mb-1 font-medium">Notes</label>
                <textarea id="appointment-notes" class="input-enhanced w-full" rows="2"></textarea>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-teal-500 text-white px-4 py-2 rounded-lg hover:bg-teal-600 transition-colors">Add Appointment</button>
              </div>
            </form>
          </div>
        </div>
      `);
    }
    function renderAppointmentDetailsModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('appointment-details-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="appointment-details-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('appointment-details-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Appointment Details</h2>
            <div id="appointment-details-content"></div>
          </div>
        </div>
      `);
    }
    function renderTotReportModal() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer || document.getElementById('tot-report-modal')) return;
      modalContainer.insertAdjacentHTML('beforeend', `
        <div id="tot-report-modal" class="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-75 opacity-0 pointer-events-none transition-opacity duration-300">
          <div class="glass max-w-md w-full p-6 rounded-2xl relative">
            <button onclick="hideModal('tot-report-modal')" class="absolute top-3 right-3 text-gray-400 hover:text-gray-700 dark:hover:text-white text-xl"><i class="fas fa-times"></i></button>
            <h2 class="text-xl font-bold mb-4 text-primary">Tot Report</h2>
            <input id="report-date" type="date" class="input-enhanced w-full mb-4" />
            <div id="tot-report-content"></div>
          </div>
        </div>
      `);
    }
    // ... existing code ...
    const originalInitializeApp = initializeApp;
    initializeApp = function() {
      renderLogModal();
      renderMilestoneModal();
      renderInventoryModal();
      renderReminderModal();
      renderAppointmentModal();
      renderTimerSettingsModal();
      renderGrowthModal();
      renderScheduleModal();
      renderProfileModal();
      renderSetupModal();
      renderWelcomeModal();
      renderResetAppModal();
      renderActivityEditorModal();
      renderAddReminderModal();
      renderAddAppointmentModal();
      renderAppointmentDetailsModal();
      renderTotReportModal();
      // Main UI setup
      renderActivityButtons();
      startDateTime();
      fetchWeather();
      loadProfiles();
      // Call original app logic (render logs, stats, etc.)
      originalInitializeApp();
    };
    // ... existing code ...

    // ... existing code ...
    // Remove all previous initializeApp overrides and keep only one below:
    const originalInitializeApp = initializeApp;
    initializeApp = function() {
      // Inject all modals
      renderLogModal();
      renderMilestoneModal();
      renderInventoryModal();
      renderReminderModal();
      renderAppointmentModal();
      renderTimerSettingsModal();
      renderGrowthModal();
      renderScheduleModal();
      renderProfileModal();
      renderSetupModal();
      renderWelcomeModal();
      renderResetAppModal();
      renderActivityEditorModal();
      renderAddReminderModal();
      renderAddAppointmentModal();
      renderAppointmentDetailsModal();
      renderTotReportModal();
      // Main UI setup
      renderActivityButtons();
      startDateTime();
      fetchWeather();
      loadProfiles();
      // Call original app logic (render logs, stats, etc.)
      originalInitializeApp();
    };
    // ... existing code ...
    // In DOMContentLoaded, call only initializeApp()
    document.addEventListener('DOMContentLoaded', () => {
      initializeApp();
    });
    // ... existing code ...
